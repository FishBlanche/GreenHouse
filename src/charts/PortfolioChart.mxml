<?xml version="1.0" encoding="utf-8"?>
<!-- Christophe Coenraets, http://coenraets.org -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:charts="charts.*"
		 xmlns:controls="mx.controls.*"
		 width="100%" height="100%" clipAndEnableScrolling="true"
		 creationComplete="completeHandler()"
		 
		 resize="redraw()">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ColorUtil;
			
			import spark.effects.Move;
			import spark.managers.PersistenceManager;
			import spark.primitives.supportClasses.FilledElement;
			
			import charts.JackAxisArrayList;
			 
			import model.SensingEntry;
			
			private var myAMF:AMFChannel=new AMFChannel();
			private var channelSet:ChannelSet=new ChannelSet();
			private var ro:RemoteObject = new RemoteObject();
			private  var serveraddress:PersistenceManager = new PersistenceManager();
			public var _data:Array;
			protected var min:Number;
			[Bindable]
			protected var max:Number;
			[Bindable]
			public var srollerwidth:Number;
			[Bindable]
			public var firstDate:Date;
			[Bindable]
			public var lastDate:Date;
			[Bindable]
			public var widthdays:Number; 
			[Bindable]
			public var zoomdata:int=5;
			
			[Bindable]
			public var itemSelected:Number=0;
			
			
			public var scalex:Number = 1;
			
			
			public function set data(data:Array):void
			{
				_data = data;
				this.datahandler();
			}
			
			public function get data():Array
			{
				return _data;
			}
			
			public function datahandler():void
			{
	 
				 
				if(itemSelected==1)
				{ 
					chartName.text="温度(℃)";
				}
				else if(itemSelected==2){	 
					chartName.text="湿度(%rh)";
				}
				else if(itemSelected==3){ 
					chartName.text="土壤温度(℃)";
				}else if(itemSelected==4){ 
					chartName.text="土壤湿度(%rh)";
				}
				else if(itemSelected==5){ 
					chartName.text="一氧化碳(ppm)";
				}
				else if(itemSelected==6){ 
					chartName.text="土壤ph";
				}
				else if(itemSelected==7){ 
					chartName.text="二氧化碳(ppm)";
				}
				else if(itemSelected==8){ 
					chartName.text="光照(lux)";
				}
				if(data.length <= 0){
					return;
				}
			 //trace("data.length"+data.length+","+data[0].timestamparrive_tm+","+data[0].value);
				firstDate = data[0].timestamparrive_tm as Date;
				lastDate = _data[data.length - 1].timestamparrive_tm as Date;
			//	 trace("firstDate"+firstDate+","+"lastDate"+lastDate);
				var tmpA:Array = new Array;
				min =Number(data[0].value);
				max = Number(data[0].value);
				for (var i:int=1; i<data.length; i++)
				{
					//tmp = _data[i];
					if (_data[i].value<min) min = _data[i].value;
					if (_data[i].value>max) max = _data[i].value;					
					tmpA.push(_data[i].timestamparrive_tm as Date);
					
				}
			 
				
				hAxisData.step = 20;
				hAxisData.allSource = tmpA;	
				path.width=1024*5;
				widthdays=path.width;
				redraw();
			}
			
			public function completeHandler():void
			{
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				rect.addEventListener(TransformGestureEvent.GESTURE_ZOOM, zoom);
				rect.addEventListener(MouseEvent.MOUSE_UP,fingerOut);
			 
			}
		 
			protected function zoom(e:TransformGestureEvent):void
			{ 
				var w:Number = path.width * e.scaleX;
				if (e.scaleX>1)
					path.width = w > width*15 ? width*15 : w;
				else
				{
					path.width = w < width ? width : w;
					if (path.x + path.width < width) path.x = width - path.width;
				}
				scalex*=e.scaleX;
			}
			protected function fingerOut(event:Event):void
			{
				trace("fingerOut");
				if(scalex==1) return;
				widthdays=path.width;
				hAxisData.step=Math.round(widthdays/1024)*3;
				scalex=1;	
				redraw();
			}
			
			public function redraw():void
			{
				trace("redraw()");
				if (!data) return;
				var pathData:String = "M 0 " + rect.height;
				
				var xPos:Number;
				var yPos:Number;
				var tmpdata:Number;
				var alltime:Number = lastDate.time - firstDate.time;
				for (var i:int=0; i<data.length; i++)
				{
					 
					 tmpdata=data[i].value;
					
					yPos = rect.height - tmpdata/max * rect.height;
					xPos = (data[i].timestamparrive_tm.time - firstDate.time)/alltime * width;
					pathData += " L " + xPos + " " + yPos;
				}
				pathData += "L " + xPos + " " + rect.height + " z";
				path.data = pathData;
			}
		
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:CurrencyFormatter id="cf" useCurrencySymbol="true" currencySymbol="$" fractionalDigits="0"/>
		<s:DateTimeFormatter id="df" dateTimePattern="MM/dd HH:mm"/>
		<s:NumberFormatter fractionalDigits="2" id="nf">
		</s:NumberFormatter>
		<charts:JackAxisArrayList id="hAxisData"/>
	</fx:Declarations>
	
	<s:Line top="20" left="60" right="0">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#999999"/>
		</s:stroke>
	</s:Line>
	<s:Line  top="{rect.height/4*2+20}"  left="60" right="0">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#999999"/>
		</s:stroke>
	</s:Line>
	<s:Line top="{rect.height/4+20}" left="60" right="0">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#999999"/>
		</s:stroke>
	</s:Line>
	<s:Line top="{rect.height/4*3+20}" left="60" right="0">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#999999"/>
		</s:stroke>
	</s:Line>
	<s:Label top="0" fontSize="15" id="chartName" text=""  paddingLeft="{width-width/4}" color="#000000"/>
	<s:Label top="20" left="4" text="{nf.format(max)}" fontSize="12" color="#000000"/>
	<s:Label top="{rect.height/4+20}" left="4" text="{nf.format(max/4*3)}" fontSize="12" color="#000000"/>
	<s:Label top="{rect.height/4*3+20}" left="4" text="{nf.format(max/4)}" fontSize="12" color="#000000"/>
	<s:Label  top="{rect.height/4*2+20}"  left="4" text="{nf.format(max/2)}" fontSize="12" color="#000000"/>
	
	<s:Scroller id="scroller" top="20" bottom="0" left="0" right="0">
		
		<s:Group id="rect" top="50" bottom="0" left="0" right="0">
			
			<s:DataGroup dataProvider="{hAxisData}" top="0" bottom="0" left="0" right="0"
						 >
				<s:itemRenderer>
					<fx:Component>
						<s:DataRenderer height="{outerDocument.rect.height}"
										width="{outerDocument.widthdays/outerDocument.hAxisData.length}"
										>
							<s:Label  left="0" textAlign="center"  text="{outerDocument.df.format(data) }"  bottom="4" fontSize="16" color="#000000"/>
							<s:Line  left="0" top="0" bottom="24">
								<s:stroke>
									<s:SolidColorStroke color="#999999" weight="1" />
								</s:stroke>
							</s:Line>
						</s:DataRenderer>
					</fx:Component>
				</s:itemRenderer>
				<s:layout>
					<s:HorizontalLayout gap="-1"/>
				</s:layout>
			</s:DataGroup>
			
			<s:Path id="path"  width="{width*5}"  height="100%">				
				<s:stroke>
					<s:SolidColorStroke  color="#00719b" weight="1"/>
				</s:stroke>
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry  color="#00BAFF" ratio="0" alpha=".5"/>                
						<s:GradientEntry color="#00719b" ratio="1" alpha=".5"/>
					</s:LinearGradient>
				</s:fill>
				
			</s:Path>
			
		</s:Group>
		
	</s:Scroller>
	
</s:Group>