<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"       backgroundAlpha="0.3"    xmlns:mx="library://ns.adobe.com/flex/mx" initialize="init()" removedFromStage="remove_Handle()"  creationComplete="create()" xmlns:components="components.*" xmlns:views="views.*">
	<fx:Declarations>
	</fx:Declarations>
		<fx:Style>
		@namespace "library://ns.adobe.com/flex/spark";
		.itextInput
		{
			skinClass:ClassReference("spark.skins.mobile.TextInputSkin");
			showPromptWhenFocused: false;
			borderVisible:false;
		}
		 
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.effects.Move;
			import mx.effects.easing.Bounce;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.StringUtil;
			
			import spark.components.Image;
			import spark.managers.PersistenceManager;
			import spark.skins.mobile.TextInputSkin;
			import spark.transitions.CrossFadeViewTransition;
			
			import components.DataPump;
			import components.DataPumpHelper;
			import components.LoginGroup;
			import components.ServerGroup;
			
			import controller.SensingFeed;
			
			import model.SensingEntry;
			
		 
			private var feed:SensingFeed;
		 
			private var moteAreaMap:Dictionary = new Dictionary;//icon to Area
			 
		 
			private  var datapump:DataPumpHelper  = new DataPumpHelper();
			private  var datap:DataPump = datapump.getDataPump();
			private var myAMF:AMFChannel=new AMFChannel;
			private var channelSet:ChannelSet=new ChannelSet;
			private var ro:RemoteObject = new RemoteObject;
		 
			private	var login:LoginGroup;
			private var	loginShow:Boolean=false;
			private	var connectGp:ServerGroup;
			private var	connectShow:Boolean=false;
			private	var cross:CrossFadeViewTransition=new CrossFadeViewTransition;
			
			private var	first_datashow:Boolean=true;
			private function rc1Click(evt:MouseEvent):void
			{
				
				navigator.pushView(views.HistoryView,moteAreaMap,null,cross);
				FlexGlobals.topLevelApplication.selectedArea=1;
			}
			private function rc2Click(evt:MouseEvent):void
			{
				 
				navigator.pushView(views.HistoryView,moteAreaMap,null,cross);
				FlexGlobals.topLevelApplication.selectedArea=2;
			}
			private function rc3Click(evt:MouseEvent):void
			{
				 
				navigator.pushView(views.HistoryView,moteAreaMap,null,cross);
				FlexGlobals.topLevelApplication.selectedArea=3;
			}
			private function rc4Click(evt:MouseEvent):void
			{
			    navigator.pushView(views.HistoryView,moteAreaMap,null,cross);
				FlexGlobals.topLevelApplication.selectedArea=4;
			}
			private function remove_Handle():void
			{
				if(login&&loginShow)
				{
					this.removeElement(login);
					login=null;
				}
				if(connectGp&&connectShow)
				{
					this.removeElement(connectGp);
					connectGp=null;
				}
			}
			private function init():void
			{
				bg.addEventListener(MouseEvent.MOUSE_DOWN,down_handle);
				var persistencemanager:PersistenceManager=new PersistenceManager();
				if(persistencemanager.getProperty("serverAddress"))
				{
					myAMF.url=persistencemanager.getProperty("serverAddress").toString();
					
					channelSet.addChannel(myAMF); 
					ro.channelSet = channelSet;
					ro.destination="FindNewestSense";
					ro.addEventListener(ResultEvent.RESULT,ds_resulted);
					ro.addEventListener(FaultEvent.FAULT,faultHandle);
					ro.GetNewestSense();
					
					FlexGlobals.topLevelApplication.GlobalBusy=false;
				}
				else
				{
					FlexGlobals.topLevelApplication.GlobalBusy=true;
				}
				 
				datap.addEventListener("_newSensingData",newData);
				feed=new SensingFeed();
			}
			private function down_handle(evt:MouseEvent):void
			{
				if(login&&loginShow)
				{
					this.removeElement(login);
					loginShow=false;
				}
				if(connectGp&&connectShow)
				{
					this.removeElement(connectGp);
					connectShow=false;
				}
				
			}
			private  function  faultHandle(event:FaultEvent):void
			{ 
				trace(" request error");
				trace(event.fault.faultString);
				trace(event.fault.faultDetail);
			}
		 
			private function ds_resulted(event:ResultEvent):void{
				trace(" ds_resulted");
				FlexGlobals.topLevelApplication.newestSensingList.removeAll();
				for(var e:Object in event.result ){
					var se:SensingEntry= new SensingEntry();
					var tempStr:String=	StringUtil.trim(event.result[e].toString());
					var a:Array = tempStr.split(" ");
				//	trace(a.length);
					for(var i:int=0;i<a.length;i++)
					{
						var b:Array =a[i].split(":");
						switch(b[0])
						{
							case "moteid_id":se.Moteid_ID=b[1];
								break;
							case "area":se.Area=b[1];
								break;
							case "sensing_type":se.sensingType=b[1];
								break;
							case "temperature":se.temperature=b[1];
								break;
							case "humidity":se.humidity=b[1];
								break;
							case "light":se.light=b[1];
								break;
							case "co2":se.CO2=b[1];
								break;
							case "nodetype":se.nodeType=b[1];
								break;
							case "A0":se.A0=b[1];
								break;
							case "A1":se.A1=b[1];
								break;
							default:trace("====Error====");
						}
					}
					//trace(se.Moteid_ID+","+se.Area+","+se.sensingType+","+se.temperature+","+se.humidity+","+se.light+","+se.CO2+","+se.nodeType);
					FlexGlobals.topLevelApplication.newestSensingList.addItem(se);
			   }
			data_show();
			}
			private function data_show():void
			{
			      trace("FlexGlobals.topLevelApplication.newestSensingList.length"+FlexGlobals.topLevelApplication.newestSensingList.length);
				for(var i:int=0;i<FlexGlobals.topLevelApplication.newestSensingList.length;i++)
					{
					 moteAreaMap[FlexGlobals.topLevelApplication.newestSensingList.getItemAt(i)]=FlexGlobals.topLevelApplication.newestSensingList.getItemAt(i).Area;
					 data_Update(FlexGlobals.topLevelApplication.newestSensingList.getItemAt(i));
				  }
				first_datashow=false;
			}
			private function create():void
			{
				rdg1.area.text="区域一";
			 
				rdg1.searchHis.addEventListener(MouseEvent.CLICK,rc1Click);
				rdg2.area.text="区域二";
			 
				rdg2.searchHis.addEventListener(MouseEvent.CLICK,rc2Click);
				rdg3.area.text="区域三";
			 
				rdg3.searchHis.addEventListener(MouseEvent.CLICK,rc3Click);
				rdg4.area.text="区域四";
			 
				rdg4.searchHis.addEventListener(MouseEvent.CLICK,rc4Click);
            }
			private function data_Update(se:SensingEntry):void
			{
				var targetArr:Array=new Array;
				var mov:Move = new Move();
				
				mov.xBy=-60;
				mov.duration=600;
				
				switch(se.sensingType)
				{
					case "HT":	switch(se.Area)
					{
						case 1:  rdg1.temp.text=se.temperature.toString();
							rdg1.humi.text=se.humidity.toString();
							targetArr.push(rdg1.btemp);
							targetArr.push(rdg1.bhumi);
						 
							break;
						case 2: rdg2.temp.text=se.temperature.toString();
							rdg2.humi.text=se.humidity.toString();
							targetArr.push(rdg2.btemp);
							targetArr.push(rdg2.bhumi);
						 
							break;
						case 3: rdg3.temp.text=se.temperature.toString();
							rdg3.humi.text=se.humidity.toString();
							targetArr.push(rdg3.btemp);
							targetArr.push(rdg3.bhumi);
						 
							break;
						case 4: rdg4.temp.text=se.temperature.toString();
							rdg4.humi.text=se.humidity.toString();
							targetArr.push(rdg4.btemp);
							targetArr.push(rdg4.bhumi);
						 
							break;
					}
						break;
					case "CO2":switch(se.Area)
					{
						case 1:  rdg1.co2.text=se.CO2.toString();
							targetArr.push(rdg1.bco2);
						 
							break;
						case 2:  rdg2.co2.text=se.CO2.toString();
							targetArr.push(rdg2.bco2);
						 
							break;
						case 3: rdg3.co2.text=se.CO2.toString();
							targetArr.push(rdg3.bco2);
						 
							break;
						case 4:  rdg4.co2.text=se.CO2.toString();
							targetArr.push(rdg4.bco2);
						 
							break;
					}
						break;
					case "CO":switch(se.Area)
					{
						case 1:  rdg1.co.text=se.CO2.toString();
							targetArr.push(rdg1.bco);
							 
							break;
						case 2:  rdg2.co.text=se.CO2.toString();
							targetArr.push(rdg2.bco);
							 
							break;
						case 3: rdg3.co.text=se.CO2.toString();
							targetArr.push(rdg3.bco);
							
						 
							break;
						case 4:  rdg4.co.text=se.CO2.toString();
							targetArr.push(rdg4.bco);
							
						 
							break;
					}
						break;
					case "L":switch(se.Area)
					{
						case 1:  rdg1.light.text=se.light.toString();
							targetArr.push(rdg1.blight);
							
							 
							break;
						case 2:   rdg2.light.text=se.light.toString();
							targetArr.push(rdg2.blight);
							
						 
							break;
						case 3:  rdg3.light.text=se.light.toString();
							targetArr.push(rdg3.blight);
							
							 
							break;
						case 4:   rdg4.light.text=se.light.toString();
							targetArr.push(rdg4.blight);
							
						 
							break;
					}
						break;
					case "SHT":
						
						switch(se.Area)
					{
						case 1:    rdg1.stemp.text=se.A0.toString();
							rdg1.shumi.text=se.A1.toString();
							targetArr.push(rdg1.bstemp);
							targetArr.push(rdg1.bshumi);
							 
							break;
						case 2:    rdg2.stemp.text=se.A0.toString();
							rdg2.shumi.text=se.A1.toString();
							targetArr.push(rdg2.bstemp);
							targetArr.push(rdg2.bshumi);
							 
							break;
						case 3:   rdg3.stemp.text=se.A0.toString().toString();
							rdg3.shumi.text=se.A1.toString();
							targetArr.push(rdg3.bstemp);
							targetArr.push(rdg3.bshumi);
							 
							break;
						case 4:    rdg4.stemp.text=se.A0.toString();
							rdg4.shumi.text=se.A1.toString();
							targetArr.push(rdg4.bstemp);
							targetArr.push(rdg4.bshumi);
							 
							break;
					}
						break;
					case "PH":switch(se.Area)
					{
						case 1:  rdg1.ph.text=se.CO2.toString();
							targetArr.push(rdg1.bph);
							 
							break;
						case 2:  rdg2.ph.text=se.CO2.toString();
							targetArr.push(rdg2.bph);
							
						 
							break;
						case 3: rdg3.ph.text=se.CO2.toString();
							targetArr.push(rdg3.bph);
							
						 
							break;
						case 4:  rdg4.ph.text=se.CO2.toString();
							targetArr.push(rdg4.bph);
							
							
							break;
					}
						break;
					default:break;
				}
				if(!first_datashow&&targetArr.length>0)
				{
					mov.play(targetArr,true);
				}
			}
			private function newData(event:Event):void
			{   
				var moteid:int = datap.newestSensing.Moteid_ID;
				var stockCount:int = FlexGlobals.topLevelApplication.newestSensingList.length;
				for(var i=0;i<stockCount;i++){
				 if(moteid==FlexGlobals.topLevelApplication.newestSensingList.getItemAt(i).Moteid_ID)
				 {
				 	 //trace("newData"+moteid);
					 data_Update(FlexGlobals.topLevelApplication.newestSensingList.getItemAt(i));
					 
					 break;
				 }
			 
				}
			
			}
			private function resize_app():void
			{
				if(!FlexGlobals.topLevelApplication.isMax)
				{
					NativeApplication.nativeApplication.activeWindow.maximize();
					FlexGlobals.topLevelApplication.isMax=true;
				}
				else
				{
					NativeApplication.nativeApplication.activeWindow.width=1024;
					NativeApplication.nativeApplication.activeWindow.height=768;
					FlexGlobals.topLevelApplication.isMax=false;
				}
				 
			}
			private function close_app():void
			{
				
				NativeApplication.nativeApplication.exit();//退出
			}
			 
			private function control_view():void
			{
				 
				navigator.pushView(views.MyControlView,null,null,cross);
			}
			
			private function show_login(evt:MouseEvent):void
			{
				if(connectGp&&connectShow)
				{
					this.removeElement(connectGp);
					connectShow=false;
				}
				if(!login)
				{
					login=new LoginGroup;
				}
				 login.width=210;
				 login.height=100;
				 login.x=evt.stageX-120;
				 login.y=evt.stageY-15;
			     this.addElement(login);
				 loginShow=true;
			}
			private function show_connect(evt:MouseEvent):void
			{
				if(login&&loginShow)
				{
					this.removeElement(login);
					loginShow=false;
				}
				if(!connectGp)
				{
					connectGp=new  ServerGroup;
				}
				connectGp.width=210;
				connectGp.height=100;
				connectGp.x=evt.stageX-120;
				connectGp.y=evt.stageY-15;
				this.addElement(connectGp);
				connectShow=true;
			}
	]]>
	</fx:Script>
	 
	<s:navigationContent>
		<s:Spacer width="25"/>
		<s:Image id="historyshow" source="assets/history_active.png"     smooth="true" />
		<s:Image id="splitshow" source="@Embed('assets/split.png')"     smooth="true" />
		<s:Image id="controlshow" click="control_view()"	source="assets/control_btn.png"     smooth="true" />  
	 </s:navigationContent>
	 
	<s:actionContent>
		<s:HGroup verticalAlign="middle">
 			<!--s:Image id="ishow" source="@Embed('assets/addr.png')"  click="show_Handle()"  smooth="true" /-->
			<s:Image id="splitshow1" source="@Embed('assets/split.png')"     smooth="true" />
		    <s:Label text="设置" fontSize="20" color="#999999" click="show_connect(event)"  fontFamily="微软雅黑"   verticalAlign="middle"/>
			<s:Image id="splitshow4" source="@Embed('assets/split.png')"     smooth="true" />
			<s:Label text="登录" fontSize="20" color="#999999"  fontFamily="微软雅黑" click="show_login(event)"   verticalAlign="middle"/>
			<s:Image id="splitshow2" source="@Embed('assets/split.png')"     smooth="true" />
			<s:Image id="changesizeshow" source="@Embed('assets/max.png')"  buttonMode="true" click="resize_app()"    smooth="true" />
			<s:Image id="splitshow3" source="@Embed('assets/split.png')"     smooth="true" />
			<s:Image id="closeshow" source="@Embed('assets/close_btn.png')"  buttonMode="true" click="close_app()"    smooth="true" />
			<s:Spacer width="5"/>
 		</s:HGroup>
	</s:actionContent>
	 
	 <s:Image id="bg"   scaleMode="stretch" source="assets/mainview.png" width="100%" height="100%" smooth="true"/>
	 <!--s:VGroup   height="{Capabilities.screenResolutionY}" width="{Capabilities.screenResolutionX}"-->
	 <s:VGroup   gap="27"  horizontalAlign="center"  verticalAlign="middle"  height="{this.height}" width="{this.width}">
		 <s:HGroup gap="27" width="80%" height="40%" horizontalAlign="center" verticalAlign="middle">
			 <components:RealDataGroup  backgroundImage="@Embed('assets/area1.png')" id="rdg1" width="35%" height="100%"/>
			 <components:RealDataGroup backgroundImage="@Embed('assets/area2.png')" id="rdg2" width="35%" height="100%"/>
			 <!--s:Image smooth="true" source="assets/area1.png"   height="100%"/>
			 <s:Image smooth="true" source="assets/area2.png"   height="100%"/-->
		 </s:HGroup>
		 <s:HGroup gap="27" width="80%" height="40%" horizontalAlign="center" verticalAlign="middle">
			 <components:RealDataGroup backgroundImage="@Embed('assets/area4.png')" id="rdg4" width="35%" height="100%"/>
			 <components:RealDataGroup backgroundImage="@Embed('assets/area3.png')" id="rdg3" width="35%" height="100%"/>
			 <!--s:Image smooth="true" source="assets/area4.png"   height="100%"/>
			 <s:Image smooth="true" source="assets/area3.png"   height="100%"/-->
		 </s:HGroup>
	</s:VGroup>
	 
	<s:BusyIndicator horizontalCenter="0" verticalCenter="0" id="busy" visible="{FlexGlobals.topLevelApplication.GlobalBusy}" width="60" height="60" right="0"  symbolColor="haloblue" >
	</s:BusyIndicator> 
</s:View>
