<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" removedFromStage="remove_Handle()" preinitialize="preinit()"    xmlns:mx="library://ns.adobe.com/flex/mx"  xmlns:charts="charts.*"  backgroundAlpha="0.3" initialize="init()" creationComplete="create()">
	<fx:Declarations>
		<mx:SeriesSlide  id="slide" direction="right"  duration="200"   />
		<mx:SolidColorStroke id="chartStroke" color="black" weight="1" alpha="0.7"/>
		 
		<mx:SolidColorStroke id = "s1" color="#f47920" weight="0.6"/>
		<mx:SolidColorStroke id = "s2" color="#5c7a29" weight="0.6"/>
		<mx:SolidColorStroke id = "s3" color="#f47920" weight="0.6"/>
		<mx:SolidColorStroke id = "s4" color="#5c7a29" weight="0.6"/>
		<mx:SolidColorStroke id = "s5" color="#ed1941" weight="0.6"/>
		<mx:SolidColorStroke id = "s6" color="#1d953f" weight="0.6"/>
		<mx:SolidColorStroke id = "s7" color="#005344" weight="0.6"/>
		<mx:SolidColorStroke id = "s8" color="#f47920" weight="0.6"/>
		 
		<mx:SolidColor id="circleFill" color="#f47920" alpha="1"/>
		<s:DateTimeFormatter id="df" dateTimePattern="MM/dd HH:mm"/>
		<charts:JackAxisArrayList id="hAxisData"/>
	</fx:Declarations>
	<fx:Style>
		@namespace "library://ns.adobe.com/flex/spark";
		.BigFont
		{
			fontSize:13;
		}
		.itextInput
		{
			skinClass:ClassReference("spark.skins.mobile.TextInputSkin");
			showPromptWhenFocused: false;
			borderVisible:false;
		}
		.issueTimelineHolder
		{
			background-color:#787878;
		}
		.issueTimelineChart
		{
			padding-top:5px;
			padding-right:0;
			padding-bottom:0;
			padding-left:0;    
		}
		.timelineDateAxis
		{
			color:#F00000;
		}
		
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.StringUtil;
			
			import spark.components.Group;
			import spark.components.Image;
			import spark.managers.PersistenceManager;
			import spark.skins.mobile.TextInputSkin;
			import spark.transitions.CrossFadeViewTransition;
			import spark.transitions.SlideViewTransition;
			
			import charts.PortfolioChart;
		    private var Tchart:PortfolioChart;
			private var Hchart:PortfolioChart;
			private var STchart:PortfolioChart;
			private var SHchart:PortfolioChart;
			private var COchart:PortfolioChart;
			private var PHchart:PortfolioChart;
			private var CO2chart:PortfolioChart;
			private var Lchart:PortfolioChart;
			
			private	var slideTrans:SlideViewTransition=new SlideViewTransition;
			private var myAMF:AMFChannel=new AMFChannel;
			private var channelSet:ChannelSet=new ChannelSet;
			private var ro:RemoteObject = new RemoteObject;
			private var moteMap:Dictionary ;
			private	 var tempInfo:ArrayCollection  = new ArrayCollection;  //第一层树结点数据
			private	 var humiInfo:ArrayCollection  = new ArrayCollection;  //第一层树结点数据
			private	 var stempInfo:ArrayCollection  = new ArrayCollection;  //第一层树结点数据
			private	 var shumiInfo:ArrayCollection  = new ArrayCollection;  //第一层树结点数据
			private	 var coInfo:ArrayCollection  = new ArrayCollection;  //第一层树结点数据
			private	 var phInfo:ArrayCollection  = new ArrayCollection;  //第一层树结点数据
			private	 var co2Info:ArrayCollection  = new ArrayCollection;  //第一层树结点数据
			private	 var lInfo:ArrayCollection  = new ArrayCollection;  //第一层树结点数据
			private	var TH_ID:String="";
			private	var STH_ID:String="";
			private	var CO_ID:String="";
			private	var PH_ID:String="";
			private	var CO2_ID:String="";
			private	var L_ID:String="";
			private	var cross:CrossFadeViewTransition=new CrossFadeViewTransition;
			private var numReg:RegExp =/^[0-9]*[1-9][0-9]*$/;
			
			private function remove_Handle():void
			{
				trace("remove_Handle():");
				PC.removeAllElements();
				tempInfo.removeAll();tempInfo=null;
				humiInfo.removeAll();humiInfo=null;
				stempInfo.removeAll();stempInfo=null;
				shumiInfo.removeAll();shumiInfo=null;
				coInfo.removeAll();coInfo=null;
				phInfo.removeAll();phInfo=null;
				co2Info.removeAll();co2Info=null;
				lInfo.removeAll();lInfo=null;
				
			
			}
			private function preinit():void
			{
				  
				 
			}
			private function init():void
			{
			    slideTrans.direction="right";
				moteMap=data as Dictionary;
				for(var e:Object in moteMap){ 
					if(moteMap[e]==FlexGlobals.topLevelApplication.selectedArea)
					{
						trace(e.Moteid_ID+"||"+e.sensingType);
						switch(e.sensingType)
						{
							case "HT": TH_ID=String(e.Moteid_ID);
									   break;
							case "CO2": CO2_ID=String(e.Moteid_ID);
								      break;
							case "CO": CO_ID=String(e.Moteid_ID);
								      break;
							case "L": L_ID=String(e.Moteid_ID);
								      break;
							case "SHT":STH_ID=String(e.Moteid_ID); 
								      break;
							case "PH": PH_ID=String(e.Moteid_ID);
								     break;
							default:break; 
						}
					}
				}
				trace(TH_ID+","+STH_ID+","+CO_ID+","+PH_ID+","+CO2_ID+","+L_ID);
				var persistencemanager:PersistenceManager=new PersistenceManager();
				if(persistencemanager.load())
				{
					if(persistencemanager.getProperty("serverAddress"))
					{
						myAMF.url=persistencemanager.getProperty("serverAddress").toString();
				  
						channelSet.addChannel(myAMF); 
						ro.channelSet = channelSet;
						ro.destination="FindLastSense";
						ro.addEventListener(ResultEvent.RESULT,result_Handle);
						ro.addEventListener(FaultEvent.FAULT,faultHandle);
						ro.newGetLastSense(TH_ID,STH_ID,CO_ID,PH_ID,CO2_ID,L_ID,1);//select the last five days' data
						 
				//		trace("ro"+ro.requestTimeout);
						FlexGlobals.topLevelApplication.GlobalBusy=false;
					}
					else
					{
						FlexGlobals.topLevelApplication.GlobalBusy=true;
					}
				}
			}
			
			private function create():void
			{
				myday.addEventListener(FlexEvent.ENTER,enter_submit);
			 
				Tchart = new PortfolioChart();
				Tchart.itemSelected=1;
				Tchart.height=this.height*0.25;
				PC.addElement(Tchart);
				 
				
				Hchart = new PortfolioChart();
				Hchart.itemSelected=2;
				Hchart.height=this.height*0.25;
				PC.addElement(Hchart);
				 
				
				
				STchart = new PortfolioChart();
				STchart.itemSelected=3;
				STchart.height=this.height*0.25;
				PC.addElement(STchart);
				 
				
				SHchart = new PortfolioChart();
				SHchart.itemSelected=4;
				SHchart.height=this.height*0.25;
				PC.addElement(SHchart);
				 
				
				COchart = new PortfolioChart();
				COchart.itemSelected=5;
				COchart.height=this.height*0.25;
				PC.addElement(COchart);
				 
				PHchart = new PortfolioChart();
				PHchart.itemSelected=6;
				PHchart.height=this.height*0.25;
				PC.addElement(PHchart);
				 
				
				CO2chart = new PortfolioChart();
				CO2chart.itemSelected=7;
				CO2chart.height=this.height*0.25;
				PC.addElement(CO2chart);
			 
				Lchart = new PortfolioChart();
				Lchart.itemSelected=8;
				Lchart.height=this.height*0.25;
				PC.addElement(Lchart);  
				var fillgp:Group=new Group;
				fillgp.height=40;
				PC.addElement(fillgp); 
				
				
			}
			protected function zoom(e:TransformGestureEvent):void
			{ 
				 
			}
			protected function fingerOut(event:Event):void
			{
				
			 
			}
			private  function  faultHandle(event:FaultEvent):void
		    { 
				trace("faultHandle(event:FaultEvent) request error");
				trace(event.fault.faultString);
				trace(event.fault.faultDetail);
			}
			private function result_Handle(event:ResultEvent):void{
			    tempInfo.removeAll();
				humiInfo.removeAll();
				stempInfo.removeAll();
				shumiInfo.removeAll();
				coInfo.removeAll();
				phInfo.removeAll();
				co2Info.removeAll();
				lInfo.removeAll();
				var i:int=1;
				for(var e:Object in event.result ){
					 switch(i)
					 {
						 case 1:tempInfo=event.result[e] as ArrayCollection;
							    Tchart.data=set_data(tempInfo);
							     break;
						 case 2:humiInfo=event.result[e] as ArrayCollection;
							   Hchart.data=set_data(humiInfo);
							    break;
						 case 3:stempInfo=event.result[e] as ArrayCollection;
							     STchart.data= set_data(stempInfo);
							    break;
						 case 4:shumiInfo=event.result[e] as ArrayCollection;
							    SHchart.data=  set_data(shumiInfo);
							    break;
						 case 5:coInfo=event.result[e] as ArrayCollection;
							    COchart.data=set_data(coInfo);
							   break;
						 case 6:phInfo=event.result[e] as ArrayCollection;
							      PHchart.data=set_data(phInfo);
							    break;
						 case 7:co2Info=event.result[e] as ArrayCollection;
							     CO2chart.data=set_data(co2Info);
							      break;
						 case 8:lInfo=event.result[e] as ArrayCollection;
							    Lchart.data=set_data(lInfo);
							    break;
						 default:trace("一天数据出错！！！");
					 }
					 i++;
				}
				historyShowBtn.includeInLayout=true;
				historyShowBtn.visible=true;
				busy.includeInLayout=false;
				busy.visible=false; 
			}
			private function set_data(ac:ArrayCollection):Array{
				var tempArr:Array;
				var takenum:int=Math.floor(ac.length/1500);
				var removenum:int=0;
				if(takenum>1){
					for(var i:int=0;i<ac.length;)
					{
						for(var j:int=1;j<takenum&&(i+1)<ac.length;j++)
						{
							ac.removeItemAt(i+1);
							removenum++;
						}
						i=i+1;
					}
					ac.refresh();
				}
				tempArr=ac.toArray();
				return tempArr;
			}
			private function enter_submit(event:FlexEvent):void{
				
				search_click();
			}
		 
		
			private function search_click():void{
				stage.focus=null;
				if(numReg.test(StringUtil.trim(myday.text)))
				{
					//trace("yes");
					historyShowBtn.includeInLayout=false;
					historyShowBtn.visible=false;
					busy.includeInLayout=true;
					busy.visible=true;
					ro.newGetLastSense(TH_ID,STH_ID,CO_ID,PH_ID,CO2_ID,L_ID,int(StringUtil.trim(myday.text)));//select the last five days' data
				}
				else
				{
				//	trace("no");
					myday.text="请输入正整数!";
					 
				}
				
			}
			private function view_change():void{
				 
			 	this.removeAllElements();
				 
				navigator.pushView(views.GreenHouseView,null,null,cross);
			}
		]]>
	</fx:Script>
	<s:navigationContent>
		<s:Button icon="@Embed('assets/back.png')" click="view_change()"  />
		<!--s:Spacer width="8"/-->
		
	</s:navigationContent>
	 <s:titleContent>
		 <s:Label fontFamily="微软雅黑" fontSize="16" text="区域{FlexGlobals.topLevelApplication.selectedArea}历史趋势" color="#999999"   verticalAlign="middle" backgroundAlpha="0"  horizontalCenter="0"  />
		 <s:Spacer width="12"/>
		 <s:HGroup verticalAlign="middle">
			 <s:TextInput height="25" fontFamily="微软雅黑" fontSize="16" styleName="itextInput"  color="#999999"          id="myday"  prompt="输入查看天数"  skinClass="spark.skins.mobile.TextInputSkin" />
 			 <s:Label fontFamily="微软雅黑" text="天" color="#999999"   verticalAlign="middle" backgroundAlpha="0"   fontSize="16"  />
			 <s:Image id="historyShowBtn"  click="search_click()"   source="assets/searchHis.png" />
			 <s:BusyIndicator id="busy" width="20" height="20" visible="false" includeInLayout="false"    symbolColor="haloblue" />
		 </s:HGroup>
	 </s:titleContent>
	<s:actionContent>
	</s:actionContent>
	<s:Image id="bg"   scaleMode="stretch" source="assets/controlView.png" width="100%" height="100%" smooth="true"/>
<s:Scroller top="20"  color="haloblue"    id="scrllr"      width="{this.width}" height="{this.height}" >
	 
		<s:VGroup top="20" gap="{this.height*0.1}"   styleName="issueTimelineHolder" width="100%" height="100%" id="PC"  >
			
		</s:VGroup>
 
</s:Scroller>
	
</s:View>
