<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"  removedFromStage="remove_Handle()"   xmlns:mx="library://ns.adobe.com/flex/mx"  backgroundAlpha="0.3" initialize="init()"   creationComplete="create()" >
		<fx:Style>
		@namespace "library://ns.adobe.com/flex/spark";
		.itextInput
		{
			skinClass:ClassReference("spark.skins.mobile.TextInputSkin");
			showPromptWhenFocused: false;
			borderVisible:false;
		}
		 
			.sliderLabel
			{
				color: #1d953f;
				fontSize: 13;
			}
	</fx:Style>
	<fx:Declarations>
	 
		<mx:Move  easingFunction="{Bounce.easeInOut}"  id="btn_move"  yBy="-25" duration="450"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.effects.easing.Bounce;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.StringUtil;
			import mx.utils.UIDUtil;
			
			import spark.components.Group;
			import spark.managers.PersistenceManager;
			import spark.skins.mobile.TextInputSkin;
			import spark.transitions.CrossFadeViewTransition;
			
			import components.LoginGroup;
			import components.MyConditionGroup;
			import components.MyFanGroup;
			import components.MyHumiGroup;
			import components.MyIrriGroup;
			import components.MyRollerGroup;
			import components.MyRuleGroup;
			import components.ServerGroup;
			
			import model.ControlGroup;
			
			import skins.MyButtonSkin;
			[Bindable] [Embed (source="assets/myT.png")] private static var icon_T:Class;
			[Bindable] [Embed (source="assets/myH.png")] private static var icon_H:Class;
			[Bindable] [Embed (source="assets/myST.png")] private static var icon_ST:Class;
			[Bindable] [Embed (source="assets/mySH.png")] private static var icon_SH:Class;
			[Bindable] [Embed (source="assets/myL.png")] private static var icon_L:Class;
			[Bindable] [Embed (source="assets/myPH.png")] private static var icon_PH:Class;
			[Bindable] [Embed (source="assets/myCO.png")] private static var icon_CO:Class;
			[Bindable] [Embed (source="assets/myCO2.png")] private static var icon_CO2:Class;
		 
			private	var dateFormatter:DateFormatter = new DateFormatter();  
			
			private	var rgInner:MyRollerGroup;
			private	var rgOuter:MyRollerGroup;
			private	var fgWest:MyFanGroup;
			private	var fgEast:MyFanGroup;
			private var hg:MyHumiGroup;
			private var ig1:MyIrriGroup;
			private var ig2:MyIrriGroup;
			private var ig3:MyIrriGroup;
			private var ig4:MyIrriGroup;
			
			private var gpCollect:ArrayCollection=new ArrayCollection;
			private var myAMF:AMFChannel=new AMFChannel();
			private var channelSet:ChannelSet=new ChannelSet;
			private var ro:RemoteObject = new RemoteObject();
			private var ControlRo:RemoteObject = new RemoteObject();
			private var DelControlRo:RemoteObject = new RemoteObject();
			 
			private var AddControlRo:RemoteObject = new RemoteObject();
			private var DCRo:RemoteObject = new RemoteObject();
			private var FindRo:RemoteObject = new RemoteObject();
			
			private	var rgDel:MyRuleGroup;
			private	var rgLook:MyRuleGroup;
			private var mySensorType:int=1;
		
			[Bindable]
			private var setType:String="";
			[Bindable]
			private var myMin:Number=-20;
			[Bindable]
			private var myMax:Number=70;
		 
			private var InnerMaxRoller:String="";
			private var InnerMinRoller:String="";
			private var OuterMaxRoller:String="";
			private var OuterMinRoller:String="";
			private	var login:LoginGroup;
			private var	loginShow:Boolean=false;
			private	var connectGp:ServerGroup;
			private var	connectShow:Boolean=false;
			private function remove_Handle():void
			{
				if(login&&loginShow)
				{
					this.removeElement(login);
					login=null;
				}
				
			}
			private  function init():void{
				scrllr1.addEventListener(MouseEvent.MOUSE_DOWN,down_handle);
			
				if(AccessServer())
				{
					FindRo.findControInfo();
				}
			}
			private function down_handle(evt:MouseEvent):void
			{
				if(login&&loginShow)
				{
					this.removeElement(login);
					loginShow=false;
				}
				if(connectGp&&connectShow)
				{
					this.removeElement(connectGp);
					connectShow=false;
				}
				
			}
			private  function create():void{
				 
			}
		 
		 
			private  function AutoControl_handler(e:ResultEvent):void{
				lmessage.text="";
				if(e.result=="")
				{
					lmessage.text="未登陆";
				}
				else if(e.result=="fail")
				{
					lmessage.text="其他用户在使用";
				}
				else
				{
				    var rs:Array=String(e.result).split(";");
					if(setType=="添加")
					{
						lmessage.text="添加成功";
						var cg:ControlGroup=new ControlGroup;
						cg.gpId=rs[0];
						cg.gpValue=rs[1]+";"+rs[2]+";"+rs[3]+";"+rs[4];
					 
						gpCollect.addItem(cg);
						gpCollect.refresh();
					}
				 
					else
					{
						lmessage.text="修改成功";
						for(var i:int=0;i<gpCollect.length;i++)
						{
							if(gpCollect.getItemAt(i).gpId==rs[0])
							{
								gpCollect.getItemAt(i).gpValue=rs[1]+";"+rs[2]+";"+rs[3]+";"+rs[4];
							}
						}
					}
					AutoView();
				    DelConditionAndControl();
				}
			}
			private  function DelControl_handler(e:ResultEvent):void{
				var result=e.result;
				lmessage.text="";
				if(e.result=="")
				{
					lmessage.text="未登陆";
				}
				else if(e.result=="fail")
				{
					lmessage.text="其他用户在使用";
				}
				else
				{
					lmessage.text="成功删除";
					autovg.removeElement(rgDel);
					for(var i:int=0;i<gpCollect.length;i++)
					{
						if(gpCollect.getItemAt(i).gpId==rgDel.rulebtn.name)
						{
							gpCollect.removeItemAt(i);
							break;
						}
					}
                }
			}
			private  function DCControl_handler(e:ResultEvent):void{
				var result=e.result;
				lmessage.text="";
				if(e.result=="")
				{
					lmessage.text="未登陆";
				}
				else if(e.result=="fail")
				{
					lmessage.text="其他用户在使用";
				}
				else
				{
					lmessage.text="设置成功";
				}
			}
		 
			private  function findControlInfo_handler(e:ResultEvent):void{
				 gpCollect.removeAll();
				 gpCollect=e.result as ArrayCollection;
			}
			 
			private  function  faultHandle(event:FaultEvent):void
			{ 
				trace(" request error");
				lmessage.text="";
				lmessage.text="连接服务器失败";
				trace(event.fault.faultString);
				trace(event.fault.faultDetail);
			}
			private  function  AccessServer():Boolean
			{ 
				lmessage.text="";
				var persistencemanager:PersistenceManager=new PersistenceManager();
				if(persistencemanager.load())
				{
					if(persistencemanager.getProperty("serverAddress"))
					{
						myAMF.url=persistencemanager.getProperty("serverAddress").toString();
						channelSet.addChannel(myAMF); 
						ControlRo.channelSet = channelSet;
						ControlRo.destination="AutoControlService";//验证用户身份
						ControlRo.addEventListener(ResultEvent.RESULT,AutoControl_handler);
						ControlRo.addEventListener(FaultEvent.FAULT,faultHandle);
						DCRo.channelSet = channelSet;
						DCRo.destination="DeviceControlService";//验证用户身份
						DCRo.addEventListener(ResultEvent.RESULT,DCControl_handler);
						DCRo.addEventListener(FaultEvent.FAULT,faultHandle);
						FindRo.channelSet = channelSet;
						FindRo.destination="FindSetting";//验证用户身份
						FindRo.addEventListener(ResultEvent.RESULT,findControlInfo_handler);
						FindRo.addEventListener(FaultEvent.FAULT,faultHandle);
						DelControlRo.channelSet = channelSet;
						DelControlRo.destination="DelControlService";//验证用户身份
						DelControlRo.addEventListener(ResultEvent.RESULT,DelControl_handler);
						DelControlRo.addEventListener(FaultEvent.FAULT,faultHandle);
					 
					 
						return true;
					}
					else
					{
						lmessage.text="";
						lmessage.text="服务器地址未知";
						return false;
					}
				}
				else
				{
					lmessage.text="";
					lmessage.text="服务器地址未知";
					return false;
				}
			}
			 
		 
			private function TypeChange(type:int,e:MouseEvent):void//选择传感器
			{
				mySensorType=type;//设置各个传感器的滑竿范围
				var ve:MyConditionGroup=new MyConditionGroup;
				switch(type)
				{
					case 1:myMin=-30;
						myMax=100;//温度
						ve.myPic.source=icon_T;
						ve.mySlider.tickInterval=10;
						
						ve.mySlider.labels=new Array(-30,-20,-10,0,10,20,30,40,50,60,70,80,90,100);
						ve.myPic.name="1";
						break;
					case 2:myMin=0;
						myMax=100;//湿度
						ve.myPic.source=icon_H;
						ve.mySlider.tickInterval=10;
						ve.mySlider.labels=new Array(0,10,20,30,40,50,60,70,80,90,100);
						ve.myPic.name="2";
						break;
					case 3:myMin=-30;
						myMax=70;//土壤温度
						ve.myPic.source=icon_ST;
						ve.mySlider.tickInterval=10;
						ve.mySlider.labels=new Array(-30,-20,-10,0,10,20,30,40,50,60,70);
						ve.myPic.name="3";
						break;
					case 4:myMin=0;
						myMax=100;//土壤湿度
						ve.myPic.source=icon_SH;
						ve.mySlider.tickInterval=10;
						ve.mySlider.labels=new Array(0,10,20,30,40,50,60,70,80,90,100);
						ve.myPic.name="4";
						break;
					case 5:myMin=0;
						myMax=10000;//光照
						ve.myPic.source=icon_L;
						ve.mySlider.snapInterval=20;
						ve.mySlider.tickInterval=2000;
						ve.mySlider.labels=new Array(0,2000,4000,6000,8000,10000);
						ve.myPic.name="5";
						break;
					case 6:myMin=0;
						myMax=14;//土壤PH
						ve.myPic.source=icon_PH;
						ve.mySlider.tickInterval=2;
						ve.mySlider.snapInterval=0.2;
						ve.mySlider.labels=new Array(0,2,4,6,8,10,12,14);
						ve.myPic.name="6";
						break;
					case 7:myMin=0;
						myMax=200;//CO
						ve.myPic.source=icon_CO;
						ve.mySlider.tickInterval=20;
						
						ve.mySlider.labels=new Array(0,20,40,60,80,100,120,140,160,180,200);
						ve.myPic.name="7";
						break;
					case 8:myMin=0;
						myMax=5000;//CO2
						ve.myPic.source=icon_CO2;
						ve.mySlider.tickInterval=1000;
						ve.mySlider.snapInterval=20;
						ve.mySlider.labels=new Array(0,1000,2000,3000,4000,5000);
						ve.myPic.name="8";
						break;
					default:break;
				}
				tem.alpha=0.4;
				hum.alpha=0.4;
				stemp.alpha=0.4;
				shum.alpha=0.4;
				l.alpha=0.4;
				ph.alpha=0.4;
				co.alpha=0.4;
				co2.alpha=0.4;
				(e.currentTarget as Image).alpha=1;
				ve.mySlider.minimum=myMin;
				ve.mySlider.maximum=myMax;
				ve.width=this.width*0.8;
				ve.height=this.height*0.15;
				ve.myDel.addEventListener(MouseEvent.CLICK,conditionDel_Handle);
				vg.addElementAt(ve,vg.numChildren-1);
				if(vg.numChildren>3)
				{
					 //可以使用向后的按钮
					after1.enabled=true;
				}
			}
			private  function  mdgImg_Handle(evt:MouseEvent):void//选择设备
			{
				innerRoller.alpha=0.3;
				outerRoller.alpha=0.3;
				myHumi.alpha=0.3;
				westFan.alpha=0.3;
				eastFan.alpha=0.3;
				Irri1.alpha=0.3;
				Irri2.alpha=0.3;
				Irri3.alpha=0.3;
				Irri4.alpha=0.3;
				(evt.currentTarget as Image).alpha=1;
				switch((evt.currentTarget as Image).id)
				{
					case "innerRoller":if(!rgInner)  
					{
						rgInner=new MyRollerGroup;
						rgInner.width=this.width*0.9;
						rgInner.height=this.height*0.15;
						rgInner.roller.source="assets/innerRoller.png";
						 
						rgInner.myDel.name="rgInnerDel";
						rgInner.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
					    vg2.addElementAt(rgInner,vg2.numChildren-1);
					}
						break;
					case "outerRoller":if(!rgOuter)  
					{
						rgOuter=new MyRollerGroup;
						rgOuter.width=this.width*0.9;
						rgOuter.roller.source="assets/outerRoller.png";
						rgOuter.height=this.height*0.15;
						rgOuter.myDel.name="rgOuterDel";
						rgOuter.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
						vg2.addElementAt(rgOuter,vg2.numChildren-1);
					}
						break;
					case "westFan": if(!fgWest)
					{
						
						fgWest=new MyFanGroup;
						fgWest.width=this.width*0.9;
						fgWest.height=this.height*0.15;
						fgWest.fan.source="assets/westFan.png";
						fgWest.myDel.name="fgWestDel";
						fgWest.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
						vg2.addElementAt(fgWest,vg2.numChildren-1);
					}
						break;
					case "eastFan": if(!fgEast)
					{
						fgEast=new MyFanGroup;
						fgEast.width=this.width*0.9;
						fgEast.height=this.height*0.15;
						fgEast.fan.source="assets/eastFan.png";
						fgEast.myDel.name="fgEastDel";
						fgEast.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
						vg2.addElementAt(fgEast,vg2.numChildren-1);
					}
						break;
					case "myHumi": if(!hg)
					{
						hg=new MyHumiGroup;
						hg.width=this.width*0.9;
						hg.height=this.height*0.15;
						hg.humidifier.source="assets/myHumi.png"
						hg.myDel.name="hgDel";
						hg.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
						vg2.addElementAt(hg,vg2.numChildren-1);
					}
						break;
					case "Irri1": if(!ig1)
					{
						ig1=new MyIrriGroup;
						ig1.width=this.width*0.9;
						ig1.height=this.height*0.15;
						ig1.irrigation.source= "assets/Irri1.png";
						ig1.myDel.name="ig1Del";
							
						ig1.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
						vg2.addElementAt(ig1,vg2.numChildren-1);
					}
					break;
					case "Irri2": if(!ig2)
					{
						ig2=new MyIrriGroup;
						ig2.width=this.width*0.9;
						ig2.height=this.height*0.15;
						ig2.irrigation.source="assets/Irri2.png";
						ig2.myDel.name="ig2Del";
						ig2.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
						vg2.addElementAt(ig2,vg2.numChildren-1);
					}
						break;
					case "Irri3": if(!ig3)
					{
						ig3=new MyIrriGroup;
						ig3.width=this.width*0.9;
						ig3.height=this.height*0.15;
						ig3.irrigation.source="assets/Irri3.png";
						ig3.myDel.name="ig3Del";
						ig3.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
						vg2.addElementAt(ig3,vg2.numChildren-1);
					}
						break;
					case "Irri4": if(!ig4)
					{
						ig4=new MyIrriGroup;
						ig4.width=this.width*0.9;
						ig4.height=this.height*0.15;
						ig4.irrigation.source="assets/Irri4.png";
						ig4.myDel.name="ig4Del";
						ig4.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
						vg2.addElementAt(ig4,vg2.numChildren-1);
					}
						break;
					default:break;
				}
				if(vg2.numChildren>3)
				{
					mySetting.enabled=true;
				}
			}
			private  function ManualView():void
			{ 
				this.currentState="manual";
				manualSet.alpha=1;
				autoSet.alpha=0.5;
			}
			private  function AutoView():void
			{ 
				if(autovg)
				{
					var a:int=autovg.numChildren-1;
					while(a>0)
					{
					    autovg.removeElementAt(0);
						a--;
					}
				}
				this.currentState="auto";
				manualSet.alpha=0.5;
				autoSet.alpha=1;
				var valueArr:Array;
				for(var i:int=0;i<gpCollect.length;i++)
				{
				//	trace(gpCollect.getItemAt(i).gpId+","+gpCollect.getItemAt(i).gpValue);
					valueArr=String(gpCollect.getItemAt(i).gpValue).split(";");
					var rgp:MyRuleGroup=new MyRuleGroup;
					rgp.width=this.width*0.8;
					rgp.height=this.height*0.1;
					rgp.rulebtn.name=gpCollect.getItemAt(i).gpId;
					rgp.rulebtn.label="点击查看";
					rgp.rulebtn.addEventListener(MouseEvent.CLICK,look_Handle);
					rgp.myTime.text = valueArr[2]; 
					if(int(valueArr[3])==0)
					{
						rgp.On.selected=true;
						rgp.Off.selected=false;
					}
					else
					{
						rgp.On.selected=false;
						rgp.Off.selected=true;
					}
					rgp.On.addEventListener(MouseEvent.CLICK,RuleOC1_Handle);
					rgp.Off.addEventListener(MouseEvent.CLICK,RuleOC2_Handle);
					rgp.myRuleDel.addEventListener(MouseEvent.CLICK,RuleDel_Handle);
					autovg.addElementAt(rgp,autovg.numChildren-1);
				}
			}
			private  function  look_Handle(evt:MouseEvent):void
			{ 
				DelConditionAndControl();
			    rgLook=((evt.currentTarget as Button).parent.parent) as MyRuleGroup;
				this.currentState="condition";
		        ConditionView();
			}
			private  function  RuleOC1_Handle(evt:MouseEvent):void
			{ 
				
				//	autovg.removeElement(((evt.currentTarget as Image).parent.parent) as Group);
			    var	rg:MyRuleGroup=((evt.currentTarget as ToggleButton).parent.parent.parent) as MyRuleGroup;
				var ocgp:String="";
				for(var i:int=0;i<gpCollect.length;i++)
				{
					if(gpCollect.getItemAt(i).gpId==rg.rulebtn.name)
					{
						//gpCollect.removeItemAt(i);
					    var	valueArr:Array=String(gpCollect.getItemAt(i).gpValue).split(";");
						gpCollect.getItemAt(i).gpValue=valueArr[0]+";"+valueArr[1]+";"+valueArr[2]+";"+0;
						ocgp=gpCollect.getItemAt(i).gpId+";"+gpCollect.getItemAt(i).gpValue;
						trace("RuleOC_Handle"+ocgp);
						break;
					}
				}
				if(AccessServer())
				{
					lmessage.text="正在处理----";
					setType="开关";
					ControlRo.ControlSet(ocgp,FlexGlobals.topLevelApplication.currentUser);
				}
			}
			private  function  RuleOC2_Handle(evt:MouseEvent):void
			{ 
				
				//	autovg.removeElement(((evt.currentTarget as Image).parent.parent) as Group);
				var	rg:MyRuleGroup=((evt.currentTarget as ToggleButton).parent.parent.parent) as MyRuleGroup;
				var ocgp:String="";
				for(var i:int=0;i<gpCollect.length;i++)
				{
					if(gpCollect.getItemAt(i).gpId==rg.rulebtn.name)
					{
						//gpCollect.removeItemAt(i);
						var	valueArr:Array=String(gpCollect.getItemAt(i).gpValue).split(";");
						gpCollect.getItemAt(i).gpValue=valueArr[0]+";"+valueArr[1]+";"+valueArr[2]+";"+1;
						ocgp=gpCollect.getItemAt(i).gpId+";"+gpCollect.getItemAt(i).gpValue;
						trace("RuleOC_Handle"+ocgp);
						break;
					}
				}
				if(AccessServer())
				{
					lmessage.text="正在处理----";
					setType="开关";
					ControlRo.ControlSet(ocgp,FlexGlobals.topLevelApplication.currentUser);
				}
			}
			private  function  RuleDel_Handle(evt:MouseEvent):void
			{ 
			//	autovg.removeElement(((evt.currentTarget as Image).parent.parent) as Group);
				rgDel=((evt.currentTarget as Image).parent.parent) as MyRuleGroup;
				var delgp:String="";
				for(var i:int=0;i<gpCollect.length;i++)
				{
					if(gpCollect.getItemAt(i).gpId==rgDel.rulebtn.name)
					{
						//gpCollect.removeItemAt(i);
						delgp=gpCollect.getItemAt(i).gpId+";"+gpCollect.getItemAt(i).gpValue;
						break;
					}
				}
				if(AccessServer())
				{
					lmessage.text="正在处理----";
					DelControlRo.DelControlSet(delgp,FlexGlobals.topLevelApplication.currentUser);
				}
			}
			private  function  controlDel_Handle(evt:MouseEvent):void
			{ 
				vg2.removeElement(((evt.currentTarget as Image).parent.parent) as Group);
				switch((evt.currentTarget as Image).name)
				{
					case "rgInnerDel":rgInner.myDel.removeEventListener(MouseEvent.CLICK,controlDel_Handle);
						rgInner=null;
						break;
					case "rgOuterDel": rgOuter.myDel.removeEventListener(MouseEvent.CLICK,controlDel_Handle);
						rgOuter=null;
						break;
					case "fgWestDel":fgWest.myDel.removeEventListener(MouseEvent.CLICK,controlDel_Handle);
						fgWest=null;
						break;
					case "fgEastDel":fgEast.myDel.removeEventListener(MouseEvent.CLICK,controlDel_Handle);
						fgEast=null;
					     break;
					case "hgDel":hg.myDel.removeEventListener(MouseEvent.CLICK,controlDel_Handle);
						hg=null;
						break;
					case "ig1Del":ig1.myDel.removeEventListener(MouseEvent.CLICK,controlDel_Handle);
						ig1=null;
						break;
					case "ig2Del":ig2.myDel.removeEventListener(MouseEvent.CLICK,controlDel_Handle);
						ig2=null;
						break;
					case "ig3Del":ig3.myDel.removeEventListener(MouseEvent.CLICK,controlDel_Handle);
						ig3=null;
						break;
					case "ig4Del":ig4.myDel.removeEventListener(MouseEvent.CLICK,controlDel_Handle);
						ig4=null;
						break;
					default:break;
				}
				if(vg2.numChildren<=3)
				{
					 //设置按钮不可用
					mySetting.enabled=false;
				}
			}
			private  function  conditionDel_Handle(evt:MouseEvent):void
			{ 
				//(evt.currentTarget as Image).alpha=0.3;
				vg.removeElement(((evt.currentTarget as Image).parent.parent.parent) as Group);
				if(vg.numChildren<=3)
				{
					//向后的按钮不可用
					after1.enabled=false;
				}
			}
			private  function  DelConditionAndControl():void
			{
				if(vg)
				{
					var vgTemp:int=vg.numChildren-3;
					while(vgTemp>0)
					{
						vg.removeElementAt(2);
						vgTemp--;
					}
					if(vg.numChildren<=3)
					{
						//向后的按钮不可用
						after1.enabled=false;
					}
				}
				if(vg2)
				{
					var vg2Temp:int=vg2.numChildren-3;
					while(vg2Temp>0)
					{
						vg2.removeElementAt(2);
						vg2Temp--;
					}
					if(vg2.numChildren<=3)
					{
						//设置按钮不可用
						mySetting.enabled=false;
					}
				}
				rgInner=null;rgOuter=null;fgWest=null;fgEast=null;
				ig1=null;ig2=null;ig3=null;ig4=null;hg=null;
			}
		
			private  function before2Click():void
			{
				this.currentState="condition";
			}
			private  function ConditionView():void
			{ 
				if(rgLook)
				{
					var lookgp:Array;
					var lookStr:String;
					var lookArr:Array;
					for(var i:int=0;i<gpCollect.length;i++)
					{
						if(gpCollect.getItemAt(i).gpId==rgLook.rulebtn.name)
						{
							lookgp=String(gpCollect.getItemAt(i).gpValue).split(";");
							lookStr=lookgp[0];
							trace("lookStr"+lookStr);
							lookArr=lookStr.split(":");
							var tempArr:Array;
							for(var j=0;j<lookArr.length;j++)
							{
								tempArr=String(lookArr[j]).split(",");
								var cg:MyConditionGroup=new MyConditionGroup;
								switch(tempArr[0])
								{
									case "1":myMin=-30;
										myMax=100;//温度
										cg.myPic.source=icon_T;
										cg.mySlider.tickInterval=10;
										cg.mySlider.labels=new Array(-30,-20,-10,0,10,20,30,40,50,60,70,80,90,100);
										cg.myPic.name="1";
										break;
									case "2":myMin=0;
										myMax=100;//湿度
										cg.myPic.source=icon_H;
										cg.mySlider.tickInterval=10;
										cg.mySlider.labels=new Array(0,10,20,30,40,50,60,70,80,90,100);
										cg.myPic.name="2";
										break;
									case "3":myMin=-30;
										myMax=70;//土壤温度
										cg.myPic.source=icon_ST;
										cg.mySlider.tickInterval=10;
										cg.mySlider.labels=new Array(-30,-20,-10,0,10,20,30,40,50,60,70);
										cg.myPic.name="3";
										break;
									case "4":myMin=0;
										myMax=100;//土壤湿度
										cg.myPic.source=icon_SH;
										cg.mySlider.tickInterval=10;
										cg.mySlider.labels=new Array(0,10,20,30,40,50,60,70,80,90,100);
										cg.myPic.name="4";
										break;
									case "5":myMin=0;
										myMax=10000;//光照
										cg.myPic.source=icon_L;
										cg.mySlider.tickInterval=2000;
										cg.mySlider.snapInterval=20;
										cg.mySlider.labels=new Array(0,2000,4000,6000,8000,10000);
										cg.myPic.name="5";
										break;
									case "6":myMin=0;
										myMax=14;//土壤PH
										cg.myPic.source=icon_PH;
										cg.mySlider.tickInterval=2;
										cg.mySlider.snapInterval=0.2;
										cg.mySlider.labels=new Array(0,2,4,6,8,10,12,14);
										cg.myPic.name="6";
										break;
									case "7":myMin=0;
										myMax=200;//CO
										cg.myPic.source=icon_CO;
										cg.mySlider.tickInterval=20;
										cg.mySlider.labels=new Array(0,20,40,60,80,100,120,140,160,180,200);
										cg.myPic.name="7";
										break;
									case "8":myMin=0;
										myMax=5000;//CO2
										cg.myPic.source=icon_CO2;
										cg.mySlider.tickInterval=1000;
										cg.mySlider.snapInterval=20;
										cg.mySlider.labels=new Array(0,1000,2000,3000,4000,5000);
										cg.myPic.name="8";
										break;
									default:break;
								}
								cg.mySlider.minimum=myMin;
								cg.mySlider.maximum=myMax;
								switch(tempArr[1])
								{
									case "1":cg.bigCheck.selected=true;
										cg.smallCheck.selected=false;
										break;
									case "2":cg.bigCheck.selected=false;
										cg.smallCheck.selected=true;
										break;
									default:break;
								}
								cg.mySlider.value=Number(tempArr[2]);
								if(tempArr.length>3)
								{
									switch(tempArr[3])
									{
										case "a":cg.andCheck.selected=true;
											     cg.orCheck.selected=false;
											     break;
										case "r":cg.andCheck.selected=false;
										         cg.orCheck.selected=true;
											     break;
										default:break;
									}
								}
							    cg.width=this.width*0.8;
								cg.height=this.height*0.15;
								cg.myDel.addEventListener(MouseEvent.CLICK,conditionDel_Handle);
								vg.addElementAt(cg,vg.numChildren-1);
							}
						      setType="修改";
							  after1.enabled=true;
							  break;
						}
					}
				}
				else
				{
					this.currentState="condition";
					setType="添加";
				}
			}
		
			private  function deviceView():void
			{ 
				if(vg2)
				{
					var vg2Temp:int=vg2.numChildren-3;
					while(vg2Temp>0)
					{
						vg2.removeElementAt(2);
						vg2Temp--;
					}
					if(vg2.numChildren<=3)
					{
						//设置按钮不可用
						mySetting.enabled=false;
					}
				}
				rgInner=null;rgOuter=null;fgWest=null;fgEast=null;
				ig1=null;ig2=null;ig3=null;ig4=null;hg=null;
				this.currentState="device";
				if(rgLook)
				{
					mySetting.enabled=true;
					var lookgp:Array;
					var rulegp:Array;
					var ruleArr:Array;
					for(var i:int=0;i<gpCollect.length;i++)
					{
						if(gpCollect.getItemAt(i).gpId==rgLook.rulebtn.name)
						{
							lookgp=String(gpCollect.getItemAt(i).gpValue).split(";");
							rulegp=String(lookgp[1]).split("a");
							trace("rulegp"+lookgp[1]);
							for(var j:int=0;j<rulegp.length;j++)
							{
								
								ruleArr=String(rulegp[j]).split(",");
								switch(ruleArr[1])//设备的类型
								{
										case "1": ig1=new MyIrriGroup;
										
										switch(ruleArr[2])
										{
											case "0": ig1.waterOn.selected = true;ig1.waterOff.selected=false;
												break;
											case "1": ig1.waterOff.selected = true;ig1.waterOn.selected=false;
												break;
											
											default:break;
										}
										ig1.iSlidertime.text=(Number(ruleArr[3])/60).toString();
										ig1.width=this.width*0.9;
										ig1.height=this.height*0.15;
										ig1.irrigation.source= "assets/Irri1.png";
										ig1.myDel.name="ig1Del";
										ig1.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
										vg2.addElementAt(ig1,vg2.numChildren-1);
										break;
									case "2": ig2=new MyIrriGroup;
										
										switch(ruleArr[2])
										{
											case "0": ig2.waterOn.selected = true;ig2.waterOff.selected=false;
												break;
											case "1": ig2.waterOff.selected = true;ig2.waterOn.selected=false;
												break;
											
											default:break;
										}
										ig2.iSlidertime.text=(Number(ruleArr[3])/60).toString();
										ig2.width=this.width*0.9;
										ig2.height=this.height*0.15;
										ig2.irrigation.source="assets/Irri2.png";
										ig2.myDel.name="ig2Del";
										ig2.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
										vg2.addElementAt(ig2,vg2.numChildren-1);
										break;
									case "3": ig3=new MyIrriGroup;
										
										switch(ruleArr[2])
										{
											case "0": ig3.waterOn.selected = true;ig3.waterOff.selected=false;
												break;
											case "1": ig3.waterOff.selected = true;ig3.waterOn.selected=false;
												break;
											
											default:break;
										}
										ig3.iSlidertime.text=(Number(ruleArr[3])/60).toString();
										ig3.width=this.width*0.9;
										ig3.height=this.height*0.15;
										ig3.irrigation.source="assets/Irri3.png";
										ig3.myDel.name="ig3Del";
										ig3.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
										vg2.addElementAt(ig3,vg2.numChildren-1);
										break;
									case "4": ig4=new MyIrriGroup;
										 
										switch(ruleArr[2])
										{
											case "0": ig4.waterOn.selected = true;ig4.waterOff.selected=false;
												break;
											case "1": ig4.waterOff.selected = true;ig4.waterOn.selected=false;
												break;
											 
											default:break;
										}
										ig4.iSlidertime.text=(Number(ruleArr[3])/60).toString();
										ig4.irrigation.source="assets/Irri4.png";
										ig4.width=this.width*0.9;
										ig4.height=this.height*0.15;
										ig4.myDel.name="ig4Del";
										ig4.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
										vg2.addElementAt(ig4,vg2.numChildren-1);
										    break;
									case "5":fgWest=new MyFanGroup;
										switch(ruleArr[2])
										{
											case "0":fgWest.fanOn.selected = true;fgWest.fanOff.selected=false;
												break;
											case "1":fgWest.fanOff.selected = true;fgWest.fanOn.selected=false;
												break;
											default:break;
										}
										fgWest.fSlidertime.text=(Number(ruleArr[3])/60).toString();
										fgWest.width=this.width*0.9;
										fgWest.height=this.height*0.15;
										fgWest.fan.source="assets/westFan.png";
										fgWest.myDel.name="fgWestDel";
										fgWest.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
										vg2.addElementAt(fgWest,vg2.numChildren-1);
										break;
									case "6":fgEast=new MyFanGroup;
										switch(ruleArr[2])
										{
											case "0":fgEast.fanOn.selected = true;fgEast.fanOff.selected=false;
												break;
											case "1":fgEast.fanOff.selected = true;fgEast.fanOn.selected=false;
												break;
											default:break;
										}
										fgEast.fSlidertime.text=(Number(ruleArr[3])/60).toString();
										fgEast.width=this.width*0.9;
										fgEast.height=this.height*0.15;
										fgEast.fan.source="assets/eastFan.png";
										fgEast.myDel.name="fgEastDel";
										fgEast.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
										vg2.addElementAt(fgEast,vg2.numChildren-1);
										break;
									case "7":hg=new MyHumiGroup;
										switch(ruleArr[2])
										{
											case "0":hg.humidifierOn.selected = true;hg.humidifierOff.selected=false;
												break;
											case "1":hg.humidifierOff.selected = true;hg.humidifierOn.selected=false;
												break;
											default:break;
										}
										hg.hSlidertime.text =(Number(ruleArr[3])/60).toString();
										hg.width=this.width*0.9;
										hg.height=this.height*0.15;
										hg.humidifier.source="assets/myHumi.png"
										hg.myDel.name="hgDel";
										hg.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
										vg2.addElementAt(hg,vg2.numChildren-1);
										break;
									case "8": rgInner=new MyRollerGroup;
										 
										switch(ruleArr[2])
										{
											case "0":rgInner.rollerOn.selected=true;rgInner.rollerOff.selected=false;rgInner.rollerRet.selected =false;
												break;
											case "1":rgInner.rollerOff.selected = true;rgInner.rollerOn.selected=false;rgInner.rollerRet.selected =false;
												break;
											case "2":rgInner.rollerRet.selected = true;rgInner.rollerOff.selected=false;rgInner.rollerOn.selected=false;
												break;
											default:break;
										}
										rgInner.rSlidertime.text=(Number(ruleArr[3])/60).toString();
										rgInner.width=this.width*0.9;
										rgInner.height=this.height*0.15;
										rgInner.roller.source="assets/innerRoller.png";
										rgInner.myDel.name="rgInnerDel";
										rgInner.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
										vg2.addElementAt(rgInner,vg2.numChildren-1);
										break;
									case "9": rgOuter=new MyRollerGroup;
										
										switch(ruleArr[2])
										{
											case "0":rgOuter.rollerOn.selected=true;rgOuter.rollerOff.selected=false;rgOuter.rollerRet.selected =false;
												break;
											case "1":rgOuter.rollerOff.selected = true;rgOuter.rollerOn.selected=false;rgOuter.rollerRet.selected =false;
												break;
											case "2":rgOuter.rollerRet.selected = true;rgOuter.rollerOff.selected=false;rgOuter.rollerOn.selected=false;
												break;
											default:break;
										}
										rgOuter.rSlidertime.text=(Number(ruleArr[3])/60).toString();
										rgOuter.width=this.width*0.9;
										rgOuter.height=this.height*0.15;
										rgOuter.roller.source="assets/outerRoller.png";
										rgOuter.myDel.name="rgOuterDel";
										rgOuter.myDel.addEventListener(MouseEvent.CLICK,controlDel_Handle);
										vg2.addElementAt(rgOuter,vg2.numChildren-1);
										break;
									
									default:break;
								}
							}
						}
					}
				}
				
			}
			private  function MySet(evt:MouseEvent):void
			{ 
				btn_move.target=evt.currentTarget;
				btn_move.play(null,true);
				if(setType=="添加")
				{
					AutoControl_set("添加");//添加一条控制条件
				}
				else
				{
					AutoControl_set("修改");//添加一条控制条件
				}
		    }
			private  function  AutoControl_set(setType:String):void
			{
				 var gpStr:String="";
				 if(setType=="添加")
				 {
					 gpStr=UIDUtil.createUID()+";";
					
				 }
				 else
				 {
					 for(var i:int=0;i<gpCollect.length;i++)
					 {
						 if(gpCollect.getItemAt(i).gpId==rgLook.rulebtn.name)
						 {
							 gpStr=gpCollect.getItemAt(i).gpId+";";
						 }
					 }
				 }
				 dateFormatter.formatString = "YYYY/MM/DD JJ:NN:SS";   
				 var time:String = dateFormatter.format(new Date());   
				 var mdgTemp:MyConditionGroup;
				 for(var i:int=2;i<vg.numChildren-1;i++)
				 {
					 mdgTemp=vg.getElementAt(i) as MyConditionGroup;
					 gpStr+=mdgTemp.myPic.name+",";
					 if(mdgTemp.bigCheck.selected)
					 {
						 gpStr+="1,";//大于
					 }
					 else
					 {
						 gpStr+="2,";//小于
					 }
					 gpStr+=String(mdgTemp.mySlider.value);
					 if(i!=vg.numChildren-2)
					 {
						 gpStr+=",";
						 if(mdgTemp.andCheck.selected)
						 {
							 gpStr+="a";//与
						 }
						 else
						 {
							 gpStr+="r";//或
						 }
						 gpStr+=":";//
					 }
				 }
				 gpStr+=";";
				 if(rgInner)
				 {
					 gpStr+="4,";
					  gpStr+="8,";
					 if(rgInner.rollerOn.selected)
					 {
						 gpStr+="0,";
						 gpStr+=int(rgInner.rSlidertime.text)*60;
					 }
					 else if(rgInner.rollerOff.selected)
					 {
						 gpStr+="1,";
						 gpStr+=0;
					 }
					 else
					 {
						 gpStr+="2,";
						 gpStr+=int(rgInner.rSlidertime.text)*60;
					 }
					 gpStr+="a";
				 }
				 if(rgOuter)
				 {
					 gpStr+="4,";
					 gpStr+="9,";
					 if(rgOuter.rollerOn.selected)
					 {
						 gpStr+="0,";
						 gpStr+=int(rgOuter.rSlidertime.text)*60;
					 }
					 else if(rgOuter.rollerOff.selected)
					 {
						 gpStr+="1,";
						 gpStr+=0;
					 }
					 else
					 {
						 gpStr+="2,";
						 gpStr+=int(rgOuter.rSlidertime.text)*60;
					 }
					 gpStr+="a";
				 }
				 if(fgWest)
				 {
					 gpStr+="2,";
					 gpStr+="5,";
					 if(fgWest.fanOn.selected)
					 {
						 gpStr+="0,";
						 gpStr+=int(fgWest.fSlidertime.text)*60;
					 }
					 else
					 {
						 gpStr+="1,";
						 gpStr+=0;
					 }
					
					 gpStr+="a";
				 }
				 if(fgEast)
				 {
					 gpStr+="2,";
					 gpStr+="6,";
					 if(fgEast.fanOn.selected)
					 {
						 gpStr+="0,";
						 gpStr+=int(fgEast.fSlidertime.text)*60;
					 }
					 else
					 {
						 gpStr+="1,";
						 gpStr+=0;
					 }
					 
					 gpStr+="a";
				 }
				 if(hg)
				 {
					 gpStr+="3,7,";
					 if(hg.humidifierOn.selected)
					 {
						 gpStr+="0,";
						 gpStr+=int(hg.hSlidertime.text)*60;
					 }
					 else
					 {
						 gpStr+="1,";
						 gpStr+=0;
					 }
					 
					 gpStr+="a";
				 }
				 if(ig1)
				 {
					 gpStr+="1,";//类型
				    gpStr+="1,";
					if(ig1.waterOn.selected)
					 {
						 gpStr+="0,";
						 gpStr+=int(ig1.iSlidertime.text)*60;
					 }
					 else
					 {
						 gpStr+="1,";
						 gpStr+=0;
					 }
					
					 gpStr+="a";
				 }
				 if(ig2)
				 {
					 gpStr+="1,";//类型
					 gpStr+="2,";
					  if(ig2.waterOn.selected)
					 {
						 gpStr+="0,";
						 gpStr+=int(ig2.iSlidertime.text)*60;
					 }
					 else
					 {
						 gpStr+="1,";
						 gpStr+=0;
					 }
					 
					 gpStr+="a";
				 }
				 if(ig3)
				 {
					 gpStr+="1,";//类型
					 gpStr+="3,";
					 if(ig3.waterOn.selected)
					 {
						 gpStr+="0,";
						 gpStr+=int(ig3.iSlidertime.text)*60;
					 }
					 else
					 {
						 gpStr+="1,";
						 gpStr+=0;
					 }
					 
					 gpStr+="a";
				 }
				 if(ig4)
				 {
					 gpStr+="1,";//类型
					 gpStr+="4,";
					 if(ig4.waterOn.selected)
					 {
						 gpStr+="0,";
						 gpStr+=int(ig4.iSlidertime.text)*60;
					 }
					 else
					 {
						 gpStr+="1,";
						 gpStr+=0;
					 }
					 
					 gpStr+="a";
				 }
				 gpStr=gpStr.substr(0,gpStr.length-1);
				 gpStr+=";"+time;
				 gpStr+=";"+1;//条件默认是关闭，1关，0开
				 trace("添加或设置"+gpStr);
				if(AccessServer())
				{
					lmessage.text="正在处理----";
					ControlRo.ControlSet(gpStr,FlexGlobals.topLevelApplication.currentUser);
				}
			}
			private  function  roller_set(evt:MouseEvent):void
			{ 
				trace("roller_set()");
				lmessage.text="";
				btn_move.target=evt.currentTarget;
				btn_move.play();
				if(AccessServer())
				{
					if(roller1.selected)
					{
						if(rollerOn.selected)
						{
							DCRo.operation(4,8,int(iSlider1time.text)*60,0,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(rollerOff.selected)
						{
							DCRo.operation(4,8,0,1,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(rollerRet.selected)
						{
							DCRo.operation(4,8,int(iSlider1time.text)*60,2,FlexGlobals.topLevelApplication.currentUser);
						}
						else
						{
							lmessage.text="未选择操作";
						}
					}
					else if(roller2.selected)
					{
						if(rollerOn.selected)
						{
							DCRo.operation(4,9,int(iSlider1time.text)*60,0,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(rollerOff.selected)
						{
							DCRo.operation(4,9,0,1,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(rollerRet.selected)
						{
							DCRo.operation(4,9,int(iSlider1time.text)*60,2,FlexGlobals.topLevelApplication.currentUser);
						}
						else
						{
							lmessage.text="未选择操作";
						}
					}
					else
					{
						lmessage.text="未选择内/外遮阳";
					}
				}
			}
			private  function  fan_set(evt:MouseEvent):void
			{ 
				trace("fan_set()");
				lmessage.text="";
				btn_move.target=evt.currentTarget;
				btn_move.play();
				if(AccessServer())
				{
					if(fan1.selected)
					{
						if(fanOn.selected)
						{
							DCRo.operation(2,5,int(iSlider2time.text)*60,0,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(fanOff.selected)
						{
							DCRo.operation(2,5,0,1,FlexGlobals.topLevelApplication.currentUser);
						}
						else
						{
							lmessage.text="未选择操作";
						}
					}
					else if(fan2.selected)
					{
						if(fanOn.selected)
						{
							DCRo.operation(2,6,int(iSlider2time.text)*60,0,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(fanOff.selected)
						{
							DCRo.operation(2,6,0,1,FlexGlobals.topLevelApplication.currentUser);
						}
						else
						{
							lmessage.text="未选择操作";
						}
					}
					else
					{
						lmessage.text="未指定风扇";
					}
				}
			}
			private  function  humidifier_set(evt:MouseEvent):void
			{ 
				trace("humidifier_set()");
				lmessage.text="";
				btn_move.target=evt.currentTarget;
				btn_move.play();
				if(AccessServer())
				{
					if(humidifierOn.selected)
					{
						DCRo.operation(3,7,int(iSlider3time.text)*60,0,FlexGlobals.topLevelApplication.currentUser);
					}
					else if(humidifierOff.selected)
					{
						DCRo.operation(3,7,0,1,FlexGlobals.topLevelApplication.currentUser);
					}
					else
					{
						lmessage.text="未选择操作";
					}
				}
			}
			private  function  irrigation_set(evt:MouseEvent):void
			{ 
				trace("irrigation_set()");
				
				lmessage.text="";
				btn_move.target=evt.currentTarget;
				btn_move.play();
				if(AccessServer())
				{
					if(water1.selected)
					{
						if(waterOn.selected)
						{
							DCRo.operation(1,1,int(iSlider4time.text)*60,0,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(waterOff.selected)
						{
							DCRo.operation(1,1,0,1,FlexGlobals.topLevelApplication.currentUser);
						}
						else
						{
							lmessage.text="未选择操作";
						}
					}
					else if(water2.selected)
					{
						if(waterOn.selected)
						{
							DCRo.operation(1,2,int(iSlider4time.text)*60,0,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(waterOff.selected)
						{
							DCRo.operation(1,2,0,1,FlexGlobals.topLevelApplication.currentUser);
						}
						else
						{
							lmessage.text="未选择操作";
						}
					}
					else if(water3.selected)
					{
						if(waterOn.selected)
						{
							DCRo.operation(1,3,int(iSlider4time.text)*60,0,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(waterOff.selected)
						{
							DCRo.operation(1,3,0,1,FlexGlobals.topLevelApplication.currentUser);
						}
						else
						{
							lmessage.text="未选择操作";
						}
					}
					else if(water4.selected)
					{
						if(waterOn.selected)
						{
							DCRo.operation(1,4,int(iSlider4time.text)*60,0,FlexGlobals.topLevelApplication.currentUser);
						}
						else if(waterOff.selected)
						{
							DCRo.operation(1,4,0,1,FlexGlobals.topLevelApplication.currentUser);
						}
						else
						{
							lmessage.text="未选择操作";
						}
					}
					else
					{
						lmessage.text="未指定花洒";
					}
				}
			}
			private function data_view():void
			{
				var cross:CrossFadeViewTransition=new CrossFadeViewTransition;
				cross.duration=200;
				navigator.pushView(views.GreenHouseView,null,null,cross);
			}
			private function resize_app():void
			{
				if(!FlexGlobals.topLevelApplication.isMax)
				{
					NativeApplication.nativeApplication.activeWindow.maximize();
					FlexGlobals.topLevelApplication.isMax=true;
				}
				else
				{
					NativeApplication.nativeApplication.activeWindow.width=1024;
					NativeApplication.nativeApplication.activeWindow.height=768;
					FlexGlobals.topLevelApplication.isMax=false;
				}
			}
			private function close_app():void
			{
				NativeApplication.nativeApplication.exit();//退出
			}
			private function show_login(evt:MouseEvent):void
			{
				if(connectGp&&connectShow)
				{
					this.removeElement(connectGp);
					connectShow=false;
				}
				if(!login)
				{
					login=new LoginGroup;
				}
				login.width=210;
				login.height=100;
				login.x=evt.stageX-120;
				login.y=evt.stageY-15;
				this.addElement(login);
				loginShow=true;
			}
			private function show_connect(evt:MouseEvent):void
			{
				if(login&&loginShow)
				{
					this.removeElement(login);
					loginShow=false;
				}
				if(!connectGp)
				{
					connectGp=new  ServerGroup;
				}
				connectGp.width=210;
				connectGp.height=100;
				connectGp.x=evt.stageX-120;
				connectGp.y=evt.stageY-15;
				this.addElement(connectGp);
				connectShow=true;
			}
			private function scrllr_create():void
			{
				scrllr.addEventListener(MouseEvent.MOUSE_DOWN,down_handle);
			}
			private function scrllr2_create():void
			{
				scrllr2.addEventListener(MouseEvent.MOUSE_DOWN,down_handle);
			}
			private	function dataFormat(value:Number):String {
				 
				return   "持续" + value+"分钟";
			}     
		]]>
	</fx:Script>
	<s:states>
		<s:State name="manual" />
		<s:State name="auto" />
		<s:State name="condition" />
		<s:State name="device" />
	</s:states>
	<s:navigationContent>
		<s:Spacer width="25"/>
		<s:Image id="historyshow" click="data_view()" source="assets/history_btn.png"     smooth="true" />
		<s:Image id="splitshow" source="@Embed('assets/split.png')"     smooth="true" />
		<s:Image id="controlshow" 	source="assets/control_active.png"     smooth="true" />  
		
		
	</s:navigationContent>
	 
	<s:titleContent>
		<s:Label   fontSize="15"  id="lmessage" color="#F00000" />
	</s:titleContent>
	<s:actionContent>
		<s:HGroup verticalAlign="middle">
			<!--s:Image id="ishow" source="@Embed('assets/addr.png')"  click="show_Handle()"  smooth="true" /-->
			<s:Image id="splitshow1" source="@Embed('assets/split.png')"     smooth="true" />
			<s:Label text="设置" fontSize="20" color="#999999" click="show_connect(event)"  fontFamily="微软雅黑"   verticalAlign="middle"/>
			<s:Image id="splitshow4" source="@Embed('assets/split.png')"     smooth="true" />
			<s:Label text="登录" fontSize="20" color="#999999"  fontFamily="微软雅黑" click="show_login(event)"   verticalAlign="middle"/>
			<s:Image id="splitshow2" source="@Embed('assets/split.png')"     smooth="true" />
			<s:Image id="changesizeshow" source="@Embed('assets/max.png')"  buttonMode="true" click="resize_app()"    smooth="true" />
			<s:Image id="splitshow3" source="@Embed('assets/split.png')"     smooth="true" />
			<s:Image id="closeshow" source="@Embed('assets/close_btn.png')"  buttonMode="true" click="close_app()"    smooth="true" />
			<s:Spacer width="5"/>
		</s:HGroup>
	 
	</s:actionContent>
	<s:Image id="bg"   scaleMode="stretch" source="assets/controlView.png" width="100%" height="100%" smooth="true"/>
	<s:Scroller horizontalCenter="0"      id="scrllr1"      width="{this.width*0.9}" height="{this.height}">
		<s:VGroup  id="vg1" width="{this.width*0.9}" height="{this.height}" horizontalAlign="center" verticalAlign="middle">
			 <s:HGroup gap="10" includeIn="manual,auto" horizontalAlign="center"  width="{this.width*0.9}" height="{this.height*0.1}">
				 <!--s:Image horizontalAlign="center" click="ManualView()"   id="manualSet" alpha="1" scaleMode="letterbox"    source="assets/manual.png" width="50%"   smooth="true"/>
 				 <s:Image  horizontalAlign="center" click="AutoView()" id="autoSet" alpha="0.5" scaleMode="letterbox"  source="assets/auto.png" width="50%"   smooth="true"/-->
				 <s:Button color="white" skinClass="skins.MyControlButtonSkin"  height="100%" label="手动控制" chromeColor="green" click="ManualView()"   id="manualSet" width="50%" fontSize="25"/>
				 <s:Button color="white" skinClass="skins.MyControlButtonSkin" height="100%" label="自动控制" chromeColor="green" click="AutoView()" id="autoSet" width="50%" alpha="0.3" fontSize="25"/>
			 </s:HGroup>
			<s:VGroup includeIn="manual" height="{this.height*0.8}" width="{this.width*0.9}" horizontalAlign="center">
				<s:HGroup horizontalAlign="center" verticalAlign="middle" height="25%" width="100%">
					<s:Image id="roller" source="assets/roller.png" width="95" height="105" smooth="true"  />
					<s:HGroup verticalAlign="middle" gap="0" horizontalAlign="center" height="100%" width="30%">
						
						<s:ToggleButton height="28%" id="roller1" color="white" width="45%" selected="false" click="roller1.selected = true;roller2.selected=false;"
										label="内" skinClass="skins.LeftButtonSkin" />
						<s:ToggleButton height="28%" id="roller2" color="white" width="45%" selected="false" click="roller2.selected = true;roller1.selected=false;"
										label="外" skinClass="skins.RightButtonSkin" />
					</s:HGroup>
					<s:HGroup gap="0"  verticalAlign="middle" horizontalAlign="center" height="100%" width="25%">
						
						<s:ToggleButton height="28%"  id="rollerOn" color="white" width="33%" selected="false" click="rollerOn.selected = true;rollerOff.selected=false;rollerRet.selected =false; "
										 label="开" skinClass="skins.LeftButtonSkin" />
						<s:ToggleButton height="28%"  id="rollerRet" color="white" width="33%" selected="false" click="rollerRet.selected = true;rollerOff.selected=false;rollerOn.selected=false;"
										 label="收" skinClass="skins.MiddleButtonSkin" />
						<s:ToggleButton  height="28%" id="rollerOff" color="white" width="33%" selected="false" click="rollerOff.selected = true;rollerOn.selected=false;rollerRet.selected =false;"
										 label="停" skinClass="skins.RightButtonSkin" />
					</s:HGroup>
					<s:Image id="rdur" source="assets/duration.png" width="90" height="90"  smooth="true"/>
					
					<s:HGroup  height="100%" verticalAlign="middle" width="25%">
 						<s:TextInput restrict="0-9"  width="80%"  skinClass="spark.skins.mobile.TextInputSkin" color="#999999" verticalCenter="0"   id="iSlider1time"   fontFamily="微软雅黑" fontSize="15"  />
						<s:Label text="分" backgroundAlpha="0" fontSize="15" color="#999999" fontFamily="微软雅黑"/>

					</s:HGroup>
					
					<s:Button   click="roller_set(event)" skinClass="skins.CustomizeButtonSkin" color="white" width="95" height="60"    label="确定" horizontalCenter="0" verticalCenter="0"       fontSize="25"/>
				</s:HGroup>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" height="25%" width="100%">
					<s:Image id="fan"  source="assets/fan.png" width="95" height="105"  smooth="true"/>
					<s:HGroup verticalAlign="middle" gap="0" horizontalAlign="center" height="100%" width="30%">
						
						<s:ToggleButton height="28%" id="fan1" color="white" width="45%" selected="false" click="fan1.selected = true;fan2.selected=false;"
										label="西" skinClass="skins.LeftButtonSkin" />
						<s:ToggleButton height="28%" id="fan2" color="white" width="45%" selected="false" click="fan2.selected = true;fan1.selected=false;"
										label="东" skinClass="skins.RightButtonSkin" />
					</s:HGroup>
					<s:HGroup verticalAlign="middle" gap="0" horizontalAlign="center" height="100%" width="25%">
						
						<s:ToggleButton height="28%" id="fanOn" color="white" width="45%" selected="false" click="fanOn.selected = true;fanOff.selected=false;"
										label="开" skinClass="skins.LeftButtonSkin" />
						<s:ToggleButton height="28%" id="fanOff" color="white" width="45%" selected="false" click="fanOff.selected = true;fanOn.selected=false;"
										label="关" skinClass="skins.RightButtonSkin" />
					</s:HGroup>
					<s:Image id="fdur" source="assets/duration.png" width="90" height="90"  smooth="true"/>
					
					<s:HGroup width="25%"  height="100%" verticalAlign="middle">
 						<s:TextInput restrict="0-9"    width="80%" skinClass="spark.skins.mobile.TextInputSkin" color="#999999" verticalCenter="0"   id="iSlider2time"   fontFamily="微软雅黑" fontSize="15" />
						<s:Label text="分" backgroundAlpha="0" fontSize="15" color="#999999" fontFamily="微软雅黑"/>

					</s:HGroup>
					<s:Button click="fan_set(event)" skinClass="skins.CustomizeButtonSkin" color="white"  width="95" height="60"     label="确定" horizontalCenter="0" verticalCenter="0"       fontSize="25"/>
				</s:HGroup>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" height="25%" width="100%">
					<s:Image id="humidifier" source="assets/humidifier.png" width="95" height="105" smooth="true"/>
					<s:Label text="" width="30%" height="100%"/>
					<s:HGroup gap="0" verticalAlign="middle" horizontalAlign="center" height="100%" width="25%">
						
						<s:ToggleButton height="28%" id="humidifierOn" color="white" width="45%" selected="false" click="humidifierOn.selected = true;humidifierOff.selected=false;"
										label="开" skinClass="skins.LeftButtonSkin" />
						<s:ToggleButton height="28%" id="humidifierOff" color="white" width="45%" selected="false" click="humidifierOff.selected = true;humidifierOn.selected=false;"
										label="关" skinClass="skins.RightButtonSkin" />
					</s:HGroup>
					<s:Image id="hdur" source="assets/duration.png" width="90" height="90"  smooth="true"/>
					
					<s:HGroup width="25%"  height="100%" verticalAlign="middle">
						
 						<s:TextInput restrict="0-9"  width="80%"  skinClass="spark.skins.mobile.TextInputSkin" color="#999999" verticalCenter="0"   id="iSlider3time"   fontFamily="微软雅黑" fontSize="15" />
						<s:Label text="分" backgroundAlpha="0" fontSize="15" color="#999999" fontFamily="微软雅黑"/>

					</s:HGroup>
					<s:Button click="humidifier_set(event)" skinClass="skins.CustomizeButtonSkin" color="white" width="95" height="60"    label="确定" horizontalCenter="0" verticalCenter="0"       fontSize="25"/>
				</s:HGroup>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" height="25%" width="100%">
					<s:Image id="irrigation" source="assets/water.png" width="95" height="105"  smooth="true"/>
					<s:HGroup verticalAlign="middle" gap="0" horizontalAlign="center" height="100%" width="30%">
						<s:ToggleButton height="28%" id="water1" color="white" width="25%" selected="false" click="water1.selected = true;water2.selected=false;water3.selected=false;water4.selected=false;"
										label="区域1" skinClass="skins.LeftButtonSkin" />
						<s:ToggleButton height="28%" id="water2" color="white" width="25%" selected="false" click="water2.selected = true;water1.selected=false;water3.selected=false;water4.selected=false;"
										label="区域2" skinClass="skins.MiddleButtonSkin" />
						<s:ToggleButton height="28%" id="water3" color="white" width="25%" selected="false" click="water3.selected = true;water1.selected=false;water2.selected=false;water4.selected=false;"
										label="区域3" skinClass="skins.MiddleButtonSkin" />
						<s:ToggleButton height="28%" id="water4" color="white" width="25%" selected="false" click="water4.selected = true;water1.selected=false;water2.selected=false;water3.selected=false;"
										label="区域4" skinClass="skins.RightButtonSkin" />
					</s:HGroup>
					<s:HGroup verticalAlign="middle" gap="0" horizontalAlign="center" height="100%" width="25%">
						<s:ToggleButton height="28%" id="waterOn" color="white" width="45%" selected="false" click="waterOn.selected = true;waterOff.selected=false;"
										label="开" skinClass="skins.LeftButtonSkin" />
						<s:ToggleButton height="28%" id="waterOff" color="white" width="45%" selected="false" click="waterOff.selected = true;waterOn.selected=false;"
										label="关" skinClass="skins.RightButtonSkin" />
					</s:HGroup>
					<s:Image id="idur" source="assets/duration.png" width="90" height="90"  smooth="true"/>
					
					<s:HGroup width="25%"  height="100%" verticalAlign="middle">
						 
						<s:TextInput restrict="0-9"   width="80%"  skinClass="spark.skins.mobile.TextInputSkin" color="#999999" verticalCenter="0"   id="iSlider4time"   fontFamily="微软雅黑" fontSize="15"  />
                         <s:Label text="分" backgroundAlpha="0" fontSize="15" color="#999999" fontFamily="微软雅黑"/>
					</s:HGroup>
					<s:Button click="irrigation_set(event)" skinClass="skins.CustomizeButtonSkin" color="white"  horizontalCenter="0" verticalCenter="0"  width="95" height="60"   label="确定"      fontSize="25"/>
				</s:HGroup>
			</s:VGroup>	 
			<s:VGroup id="autovg" includeIn="auto" height="{this.height*0.8}" width="{this.width*0.9}" horizontalAlign="center">
			    <s:Image  verticalAlign="middle" id="addIcon" source="assets/addIcon.png" click="rgLook=null;ConditionView()" width="80" height="48"   smooth="true"/>
			 </s:VGroup>
		</s:VGroup>
</s:Scroller>
	<s:Scroller horizontalScrollPolicy="off" horizontalCenter="0"    creationComplete="scrllr_create()" top="5"  includeIn="condition"    id="scrllr"      width="{this.width*0.9}" height="{this.height}">
		<s:VGroup gap="20" top="5"   id="vg" width="{this.width*0.9}" height="{this.height}" horizontalAlign="center" >
		<s:HGroup top="2" width="{this.width*0.9}" horizontalAlign="center">
			<s:Image verticalAlign="middle" horizontalAlign="center"  id="leftdot2" fillMode="repeat" source="assets/dot.png" width="40%"   smooth="true"/>
			<s:Label verticalAlign="middle" horizontalCenter="0"  text="条件设置" color="green" fontWeight="bold" fontSize="25"/>
			<s:Image verticalAlign="middle"  horizontalAlign="center" id="rightdot2" fillMode="repeat" source="assets/dot.png" width="40%"   smooth="true"/>
		</s:HGroup>
	 <s:VGroup horizontalCenter="0" top="6" horizontalAlign="center" >
		 <s:HGroup width="{this.width*0.9}" height="{this.height*0.1}" horizontalAlign="center" verticalAlign="middle">
			 <s:Image   id="tem" source="{icon_T}" width="90" height="120"  click="TypeChange(1,event)" alpha="0.4"  smooth="true"/>
			 <s:Image  id="hum" source="{icon_H}" width="90" height="120" click="TypeChange(2,event)" alpha="0.4"  smooth="true"/>
			 <s:Image id="stemp" source="{icon_ST}" width="90" height="120"  click="TypeChange(3,event)" alpha="0.4" smooth="true"/>
			 <s:Image id="shum"  source="{icon_SH}" width="90" height="120" click="TypeChange(4,event)" alpha="0.4"  smooth="true"/>
			 <s:Image id="l" source="{icon_L}" width="90" height="120" click="TypeChange(5,event)" alpha="0.4"  smooth="true"/>
			 <s:Image id="ph" source="{icon_PH}" width="90" height="120" click="TypeChange(6,event)" alpha="0.4"  smooth="true"/>
			 <s:Image id="co" source="{icon_CO}" width="90" height="120" click="TypeChange(7,event)" alpha="0.4" smooth="true"/>
			 <s:Image id="co2" source="{icon_CO2}" width="90" height="120" click="TypeChange(8,event)" alpha="0.4" smooth="true"/>
		 </s:HGroup>
		 
	 </s:VGroup>
		
	  
		<s:HGroup    horizontalAlign="center">
			<s:Image verticalAlign="middle" horizontalAlign="center"  id="before1"   click="DelConditionAndControl();AutoView()"   source="assets/before.png" width="80" height="48"   smooth="true"/>
			<s:Image verticalAlign="middle"  horizontalAlign="center" id="after1" enabled="false" click="deviceView()" source="assets/after.png" width="80" height="48"   smooth="true"/>
		</s:HGroup>
	</s:VGroup>
</s:Scroller>
<s:Scroller horizontalScrollPolicy="off" horizontalCenter="0"    creationComplete="scrllr2_create()" top="5"  includeIn="device"    id="scrllr2"      width="{this.width*0.9}" height="{this.height}">
<s:VGroup gap="20" top="5"   id="vg2" width="{this.width*0.9}" height="{this.height}" horizontalAlign="center" >
		<s:HGroup top="2" width="100%" horizontalAlign="center">
			<s:Image verticalAlign="middle" horizontalAlign="center"  id="leftdot3" fillMode="repeat" source="assets/dot.png" width="40%"   smooth="true"/>
			<s:Label verticalAlign="middle" horizontalCenter="0"  text="操作设置" color="green" fontWeight="bold" fontSize="25"/>
			<s:Image verticalAlign="middle"  horizontalAlign="center" id="rightdot3" fillMode="repeat" source="assets/dot.png" width="40%"   smooth="true"/>
		</s:HGroup>
	<s:VGroup top="10" horizontalAlign="center">
		<s:HGroup top="10" width="{this.width*0.9}" height="{this.height*0.1}" horizontalAlign="center" verticalAlign="middle">
			<s:Image top="10" click="mdgImg_Handle(event)"   id="innerRoller" source="assets/innerRoller.png" width="90" height="120"  alpha="0.4"  smooth="true"/>
			<s:Image top="10" click="mdgImg_Handle(event)"   id="outerRoller" source="assets/outerRoller.png" width="90" height="120"  alpha="0.4"  smooth="true"/>
			<s:Image top="10" click="mdgImg_Handle(event)" id="westFan" source="assets/westFan.png" width="90" height="120"  alpha="0.4"  smooth="true"/>
			<s:Image top="10" click="mdgImg_Handle(event)" id="eastFan" source="assets/eastFan.png" width="90" height="120"  alpha="0.4"  smooth="true"/>
            <s:Image top="10" click="mdgImg_Handle(event)" id="myHumi" source="assets/myHumi.png" width="90" height="120"  alpha="0.4"  smooth="true"/>
			<s:Image top="10" click="mdgImg_Handle(event)" id="Irri1"  source="assets/Irri1.png" width="90" height="120"  alpha="0.4"  smooth="true"/>
			<s:Image top="10" click="mdgImg_Handle(event)" id="Irri2"  source="assets/Irri2.png" width="90" height="120"  alpha="0.4"  smooth="true"/>
			<s:Image top="10" click="mdgImg_Handle(event)" id="Irri3"  source="assets/Irri3.png" width="90" height="120"  alpha="0.4"  smooth="true"/>
			<s:Image top="10" click="mdgImg_Handle(event)" id="Irri4"  source="assets/Irri4.png" width="90" height="120"  alpha="0.4"  smooth="true"/>
		</s:HGroup>
	 
		</s:VGroup>
		 
		<s:HGroup    horizontalAlign="center">
			<s:Image verticalAlign="middle" horizontalAlign="center"  id="before2" click="before2Click()"   source="assets/before.png" width="80" height="48"   smooth="true"/>
			<s:Button id="mySetting" click="MySet(event)"  skinClass="skins.CustomizeButtonSkin" color="white" enabled="false"      label="{setType}"  width="100" height="48"  fontSize="25"/>
		</s:HGroup>
	</s:VGroup>
	</s:Scroller>
</s:View>

