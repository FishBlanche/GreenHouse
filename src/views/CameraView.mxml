<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" actionBarVisible="false"   destructionPolicy="never" xmlns:mx="library://ns.adobe.com/flex/mx"  backgroundAlpha="0.3" creationComplete="create()" >
	<fx:Script>
		<![CDATA[
			import mx.formatters.NumberFormatter;
			
			import spark.managers.PersistenceManager;
			
			private var nf:NumberFormatter = new NumberFormatter();
			private var connection;
			[Bindable]
			private var loadpercent:Number=0;
			[Bindable]
			private var isPB:Boolean=false;
			 
			private var stream:NetStream;
		 
			var video:Video = new Video();
			private  function create():void{
				nf.precision=2;
				connection = new NetConnection();
				connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				 
				// connection.connect("rtmp://fmsexamples.adobe.com/vod");
				 
				connection.connect("rtmp://unirtmp.tulix.tv:1935/globaltv"); 
				//	connection.connect("rtmp://www.cuplayer.com/vod");
				connection.client=this;
			}
			private function progressHandler(event:ProgressEvent):void {
				 
				trace("progressHandler" + stream.bufferLength + " bytesTotal=" + stream.bufferTime);
			}

			private function netStatusHandler(event:NetStatusEvent):void {
				//trace("netStatusHandler:"+event.info.code);
				 
			//	lmessage.text=event.info.code;
				switch (event.info.code) {
					case "NetConnection.Connect.Success":
						connectStream();
						break;
					case "NetStream.Play.StreamNotFound":
						trace("Unable to locate video: " );
						break;
					case "NetStream.Play.Stop":
						trace("NetStream.Play.Stop " );
						sprct.removeChild(video);
						
				}
			}
			private function connectStream():void {
				
				stream = new NetStream(connection);
				stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
			
			    stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				 
			 
				stream.addEventListener(ProgressEvent.PROGRESS,progressHandler);
				stream.client=this;
			 
				stream.bufferTime=5;
				
				video.width=sprct.width;
				video.height=sprct.height;
				video.attachNetStream(stream);

			 	//stream.play("mp4:_cs4promo_1000.f4v");
				stream.play("myStream.sdp");
				//	stream.play("mp4:Demo2014.mp4");
				video.smoothing=true;
				sprct.addChild(video);
		 
				stage.addEventListener(Event.ENTER_FRAME,onEnterFrame); 
			}
			private function onEnterFrame(event:Event):void  
			{   
				if(stream)
				{
					loadpercent=Math.round((stream.bufferLength/stream.bufferTime)*100);
					if(isNaN(loadpercent)) {
						loadpercent= 0;
						isPB=true;
					}
					else if(loadpercent>=100)
					{
						loadpercent=100;
						isPB=false;
					}
					else
					{
						isPB=true;
					}
				}
				else
				{
					loadpercent=0;
				}
				trace("loadpercent"+loadpercent);
			}  
			private function securityErrorHandler(event:SecurityErrorEvent):void {
			//	trace("securityErrorHandler: " + event);
			}
			private function asyncErrorHandler(event:AsyncErrorEvent):void {
				// ignore AsyncErrorEvent events.
			}
			public function onMetaData( o:Object ):void
			{
			//	trace("onMetaData");
			}
			
			public function onBWDone(... rest):void{
				var p_bw:Number;
				if (rest.length > 0) p_bw = rest[0];
			//	trace("bandwidth = " + p_bw + " Kbps.");
			}
			public function onXMPData(o:Object):void{
		//		 trace("onXMPData");
			}
			public function onPlayStatus( o:Object ):void
			{
			//	trace("onPlayStatus");
			}
		]]>
	</fx:Script>
	<!--s:VideoPlayer     source="rtmp://fmsex
	amples.adobe.com/vod/mp4:_cs4promo_1000.f4v" id="vp" skinClass="skins.VideoSkin" width="100%" height="100%"   autoPlay="true" loop="true"/-->
	<!--s:actionContent>
		<s:Label   fontSize="15"  id="lmessage" color="#F00000" />
	</s:actionContent-->
	<mx:VideoDisplay id="sprct"  width="100%" height="100%" live="true" autoPlay="true"/> 
	<mx:ProgressBar labelPlacement="center" barSkin="@Embed('assets/transparent.png')"     trackSkin="skins.MyProgressBar"   visible="{isPB}" includeInLayout="{isPB}"    label="{loadpercent}%"   verticalCenter="0" horizontalCenter="0"/>
	 
</s:View>
